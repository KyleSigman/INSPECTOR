// const db = window.db;

// –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ
async function testAddItem() {
    try {
        const docRef = await db.collection('items').add({
            type: "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ",
            createdAt: new Date()
        });
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ —Å ID:', docRef.id);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}


  async function loadKnowledgeData(filename) {
    return new Promise((resolve) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∫–∞—Å—Å–µ—Ç–∞
        if (localStorage.getItem('knowledgePack_loaded')) {
            const data = localStorage.getItem(`knowledge_${filename}`);
            if (data) {
                try {
                    resolve(JSON.parse(data));
                } catch (e) {
                    console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${filename}`);
                    resolve({});
                }
            } else {
                console.warn(`–§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Å—Å–µ—Ç–µ`);
                resolve({});
            }
        } else {
            // –†–µ–∑–µ—Ä–≤: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ /data/, –µ—Å–ª–∏ –∫–∞—Å—Å–µ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            fetch(`data/${filename}`)
                .then(r => r.json())
                .then(data => resolve(data))
                .catch(err => {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${filename} –∏–∑ data/`, err);
                    resolve({});
                });
        }
    });
}

function unloadKnowledgePack() {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–∞—Å—Å–µ—Ç—É?')) {
        Object.keys(localStorage)
            .filter(k => k.startsWith('knowledge_'))
            .forEach(k => localStorage.removeItem(k));
        localStorage.removeItem('knowledgePack_loaded');
        localStorage.removeItem('knowledgePack_name');
        alert('–ö–∞—Å—Å–µ—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞');
        location.reload();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–∞–¥–∫–µ (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–∑–æ–≤–∞)
function updateFitInfo() {
  const fitSelect = document.getElementById('fit');
  const infoContainer = document.getElementById('fit-info');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
  if (!fitSelect || !infoContainer) return;
  
  const fit = fitSelect.value;
  
  let systemText = '';
  let typeText = '';
  let systemClass = '';
  let typeClass = '';
  
  switch(fit) {
    case 'h7':
      systemText = '–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∞';
      typeText = '–ó–∞–∑–æ—Ä';
      systemClass = 'system-badge';
      typeClass = 'type-badge';
      break;
    case 'H8':
      systemText = '–°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è';
      typeText = '–ó–∞–∑–æ—Ä';
      systemClass = 'system-badge';
      typeClass = 'type-badge';
      break;
    case 'k6':
      systemText = '–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∞';
      typeText = '–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è';
      systemClass = 'system-badge';
      typeClass = 'type-badge';
     
      break;
    default:
      systemText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      typeText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      systemClass = 'system-badge';
      typeClass = 'type-badge';
  }
  
  infoContainer.innerHTML = `
    <div class="info-badge ${systemClass}">${systemText}</div>
    <div class="info-badge ${typeClass}">${typeText}</div>
  `;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ø—É—Å–∫–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ page-tolerance.js)
function initTolerancePage() {
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ DOM –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
  setTimeout(() => {
    updateFitInfo();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const fitSelect = document.getElementById('fit');
    if (fitSelect) {
      fitSelect.addEventListener('change', updateFitInfo);
    }
  }, 100);
}
async function calculate() {
  const sizeInput = document.getElementById('size').value;
  const size = parseFloat(sizeInput);
  const fit = document.getElementById('fit').value;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
  if (!size || size <= 0) {
    showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä');
    return;
  }

  try {
    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const fits = await loadKnowledgeData('tolerances.json'); // –∏–ª–∏ 'tolerances.json' ‚Äî –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å–∞–¥–∫–∏
    if (!fits[fit]) {
      showError('–ö–≤–∞–ª–∏—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const table = fits[fit];

    // 4. –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å—Ç—Ä–æ–∫
    const row = table.find(item => {
      const min = parseFloat(item.min);
      const max = parseFloat(item.max);
      return size > min && size <= max;
    });

    if (!row) {
      showError('–†–∞–∑–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ì–û–°–¢ 25346');
      return;
    }

    // 5. –†–∞—Å—á—ë—Ç
    const upper = row.upper / 1000; // –º–º
    const lower = row.lower / 1000;
    const diff = upper - lower;

    const upperStr = upper.toFixed(3);
    const lowerStr = lower.toFixed(3);
    const diffStr = diff.toFixed(3);

    // 6. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    document.getElementById('result').innerHTML = `
      <strong>‚åÄ${sizeInput}${fit}</strong>
      <div style="margin-top: 10px; font-size: 16px;">
        –í–µ—Ä—Ö–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: <span style="color: #e74c3c;">${upper >= 0 ? '+' : ''}${upperStr}</span> –º–º<br>
        –ù–∏–∂–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: <span style="color: #e74c3c;">${lower >= 0 ? '+' : ''}${lowerStr}</span> –º–º<br>
        –ü–æ–ª–µ –¥–æ–ø—É—Å–∫–∞: <span style="color: #6c5ce7; font-weight: bold;">${diffStr}</span> –º–º
      </div>
    `;

    // –í–º–µ—Å—Ç–æ –¥–ª–∏–Ω–Ω–æ–π –±–æ–ª—Ç–æ–≤–Ω–∏:
// const speechText = `‚åÄ${size}, ${fit}. –í–µ—Ä—Ö: ${upper >= 0 ? '+' : '-'}${Math.abs(upperStr)}. –ù–∏–∑: ${lower >= 0 ? '+' : '-'}${Math.abs(lowerStr)}. –î–æ–ø—É—Å–∫: ${diffStr} –º–º.`;
const speechText = `–î–∏–∞–º–µ—Ç—Ä ${numberToSpeech(size)} , –ø–æ—Å–∞–¥–∫–∞ ${fit}. 
                    –í–µ—Ä—Ö–Ω–µ–µ: ${upper >= 0 ? '–ø–ª—é—Å' : '–º–∏–Ω—É—Å'} ${numberToSpeech(Math.abs(upper))} –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤. 
                    –ù–∏–∂–Ω–µ–µ: ${lower >= 0 ? '–ø–ª—é—Å' : '–º–∏–Ω—É—Å'} ${numberToSpeech(Math.abs(lower))} –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤. 
                    –ü–æ–ª–µ –¥–æ–ø—É—Å–∫–∞: ${numberToSpeech(diff)} –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤.`;

speak(speechText);


    // 7. –î–µ—Ç–∞–ª–∏
    document.getElementById('interval-value').textContent = `${row.min}-${row.max} –º–º`;
    document.getElementById('upper-value').textContent = `${upper >= 0 ? '+' : ''}${upperStr} –º–º`;
    document.getElementById('lower-value').textContent = `${lower >= 0 ? '+' : ''}${lowerStr} –º–º`;
    document.getElementById('tolerance-value').textContent = `${diffStr} –º–º`;
    document.getElementById('calculation-details').style.display = 'block';

    // 8. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    setTimeout(() => updateVisualization(upper, lower, size), 100);

    // 9. –ö–Ω–æ–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    document.getElementById('showTableBtn').style.display = 'block';

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ calculate():', error); // üî• –¥–æ–±–∞–≤–ª–µ–Ω–æ!
    showError('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: ' + error.message);
  }
}

// –ì–û–õ–û–°–û–í–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï
function startVoiceInput() {
  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!SpeechRecognition) {
    alert('‚ùå –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Chrome.');
    return;
  }

  const recognition = new SpeechRecognition();
  recognition.lang = 'ru-RU';
  recognition.continuous = false;
  recognition.interimResults = false;

  recognition.onresult = (event) => {
    const transcript = event.results[0][0].transcript.toLowerCase();
    console.log('–£—Å–ª—ã—à–∞–ª:', transcript);

    // –ò—â–µ–º —á–∏—Å–ª–æ (—Ä–∞–∑–º–µ—Ä)
    const sizeMatch = transcript.match(/(\d+([.,]\d+)?)/);
    const size = sizeMatch ? parseFloat(sizeMatch[0].replace(',', '.')) : null;

    // –ò—â–µ–º –ø–æ—Å–∞–¥–∫—É: h7, H8, k6, F8 –∏ —Ç.–¥.
    const fitMatch = transcript.match(/\b([a-zA-Z]{1,2}\d+)\b/);
    let fit = null;
    if (fitMatch) {
      fit = fitMatch[0].toUpperCase();
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π option –≤ select
      const fitSelect = document.getElementById('fit');
      if ([...fitSelect.options].some(opt => opt.value === fit)) {
        fitSelect.value = fit;
      } else {
        fit = null;
      }
    }

    // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º
    if (size !== null) {
      document.getElementById('size').value = size;
    }

    if (fit) {
      document.getElementById('fit').value = fit;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á—ë—Ç
    if (size !== null || fit) {
      calculate();
    } else {
      alert('‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –ø–æ—Å–∞–¥–∫–∞');
    }
  };

  recognition.onerror = (event) => {
    let msg = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    if (event.error === 'not-allowed') {
      msg = '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.';
    } else if (event.error === 'no-speech') {
      msg = '–ù–∏—á–µ–≥–æ –Ω–µ —É—Å–ª—ã—à–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
    } else if (event.error === 'aborted') {
      msg = '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.';
    }
    alert('üé§ –û—à–∏–±–∫–∞: ' + msg);
  };

  recognition.start();
}
function numberToSpeech(num) {
  const n = Math.abs(Math.round(num * 1000)) / 1000; // —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 3 –∑–Ω–∞–∫–æ–≤
  const whole = Math.floor(n);
  const frac = Math.round((n - whole) * 1000);

  let text = '';

  // –û—Å–Ω–æ–≤–Ω–æ–µ —á–∏—Å–ª–æ
  if (whole === 0) {
    text = '–Ω–æ–ª—å';
  } else if (whole === 1) {
    text = '–æ–¥–∏–Ω';
  } else if (whole === 2) {
    text = '–¥–≤–∞';
  } else if (whole === 3) {
    text = '—Ç—Ä–∏';
  } else if (whole === 4) {
    text = '—á–µ—Ç—ã—Ä–µ';
  } else if (whole === 5) {
    text = '–ø—è—Ç—å';
  } else if (whole === 6) {
    text = '—à–µ—Å—Ç—å';
  } else if (whole === 7) {
    text = '—Å–µ–º—å';
  } else if (whole === 8) {
    text = '–≤–æ—Å–µ–º—å';
  } else if (whole === 9) {
    text = '–¥–µ–≤—è—Ç—å';
  } else if (whole === 10) {
    text = '–¥–µ—Å—è—Ç—å';
  } else if (whole === 11) {
    text = '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 12) {
    text = '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 13) {
    text = '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 14) {
    text = '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 15) {
    text = '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 16) {
    text = '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 17) {
    text = '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 18) {
    text = '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 19) {
    text = '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å';
  } else if (whole === 20) {
    text = '–¥–≤–∞–¥—Ü–∞—Ç—å';
  } else if (whole < 30) {
    text = '–¥–≤–∞–¥—Ü–∞—Ç—å ' + numberToSpeech(whole - 20);
  } else if (whole === 30) {
    text = '—Ç—Ä–∏–¥—Ü–∞—Ç—å';
  } else if (whole < 40) {
    text = '—Ç—Ä–∏–¥—Ü–∞—Ç—å ' + numberToSpeech(whole - 30);
  } else if (whole === 40) {
    text = '—Å–æ—Ä–æ–∫';
  } else if (whole < 50) {
    text = '—Å–æ—Ä–æ–∫ ' + numberToSpeech(whole - 40);
  } else if (whole === 50) {
    text = '–ø—è—Ç—å–¥–µ—Å—è—Ç';
  } else if (whole < 60) {
    text = '–ø—è—Ç—å–¥–µ—Å—è—Ç ' + numberToSpeech(whole - 50);
  } else if (whole === 60) {
    text = '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç';
  } else if (whole < 70) {
    text = '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç ' + numberToSpeech(whole - 60);
  } else if (whole === 70) {
    text = '—Å–µ–º—å–¥–µ—Å—è—Ç';
  } else if (whole < 80) {
    text = '—Å–µ–º—å–¥–µ—Å—è—Ç ' + numberToSpeech(whole - 70);
  } else if (whole === 80) {
    text = '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç';
  } else if (whole < 90) {
    text = '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç ' + numberToSpeech(whole - 80);
  } else if (whole === 90) {
    text = '–¥–µ–≤—è–Ω–æ—Å—Ç–æ';
  } else if (whole < 100) {
    text = '–¥–µ–≤—è–Ω–æ—Å—Ç–æ ' + numberToSpeech(whole - 90);
  } else if (whole === 100) {
    text = '—Å—Ç–æ';
  } else if (whole < 200) {
    text = '—Å—Ç–æ ' + numberToSpeech(whole - 100);
  } else if (whole < 300) {
    text = '–¥–≤–µ—Å—Ç–∏ ' + numberToSpeech(whole - 200);
  } else if (whole < 400) {
    text = '—Ç—Ä–∏—Å—Ç–∞ ' + numberToSpeech(whole - 300);
  } else if (whole < 500) {
    text = '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞ ' + numberToSpeech(whole - 400);
  } else if (whole < 600) {
    text = '–ø—è—Ç—å—Å–æ—Ç ' + numberToSpeech(whole - 500);
  } else if (whole < 700) {
    text = '—à–µ—Å—Ç—å—Å–æ—Ç ' + numberToSpeech(whole - 600);
  } else if (whole < 800) {
    text = '—Å–µ–º—å—Å–æ—Ç ' + numberToSpeech(whole - 700);
  } else if (whole < 900) {
    text = '–≤–æ—Å–µ–º—å—Å–æ—Ç ' + numberToSpeech(whole - 800);
  } else if (whole < 1000) {
    text = '–¥–µ–≤—è—Ç—å—Å–æ—Ç ' + numberToSpeech(whole - 900);
  } else {
    text = whole.toString(); // –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1000 ‚Äî –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã
  }

  // –î—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å
  if (frac > 0) {
    const f = frac.toString().padStart(3, '0').replace(/0+$/, '');
    text += ' —Ü–µ–ª—ã—Ö ' + f + ' —Ç—ã—Å—è—á–Ω—ã—Ö';
  }

  return text;
}

function speak(text) {
  window.speechSynthesis.cancel();

  const utter = new SpeechSynthesisUtterance(text);
  utter.lang = 'ru-RU';
  utter.rate = 1.3;        // –±—ã—Å—Ç—Ä–æ, –Ω–æ –Ω–µ –ø–∞–Ω–∏—á–µ—Å–∫–∏
  utter.pitch = 0.8;       // –Ω–∏–∂–µ ‚Üí –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º—É–∂—Å–∫–æ–π

  // –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞
  const voices = window.speechSynthesis.getVoices();

  // –ò—â–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å —Å –Ω–∏–∑–∫–∏–º —Ç–æ–Ω–æ–º
  let selectedVoice = null;

  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º "Yuri" (Microsoft, –º—É–∂—Å–∫–æ–π) –∏–ª–∏ "Aleksandr" (–µ—Å–ª–∏ –µ—Å—Ç—å)
  for (let v of voices) {
    if (v.lang.includes('ru') && (v.name.includes('Yuri') || v.name.includes('Aleksandr') || v.name.includes('–ú—É–∂—Å–∫–æ–π'))) {
      selectedVoice = v;
      break;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä—É—Å—Å–∫–∏–π
  if (!selectedVoice) {
    selectedVoice = voices.find(v => v.lang.includes('ru')) || voices[0];
  }

  if (selectedVoice) {
    utter.voice = selectedVoice;
  }

  window.speechSynthesis.speak(utter);
}

// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø—É—Å–∫–∞
function updateVisualization(upper, lower, size) {
  const visualization = document.getElementById('tolerance-visualization');
  const toleranceZone = document.getElementById('tolerance-zone');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  if (!visualization || !toleranceZone) return;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
  visualization.style.display = 'block';
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± (–ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ –º–º)
  const scale = 1000; // –£–≤–µ–ª–∏—á–∏–ª –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
  const zoneWidth = Math.abs(upper - lower) * scale;
  
  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∑–æ–Ω—É –¥–æ–ø—É—Å–∫–∞
  const zonePosition = lower * scale;
  
  toleranceZone.style.width = `${zoneWidth}px`;
  toleranceZone.style.left = `calc(50% + ${zonePosition}px)`;
  
  // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Å–∞–¥–∫–∏
  if (upper <= 0 && lower < 0) {
    // –ó–∞–∑–æ—Ä (–æ–±–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π 0)
    toleranceZone.style.background = 'linear-gradient(90deg, #ff6b6b, #e74c3c)';
  } else if (upper > 0 && lower >= 0) {
    // –ù–∞—Ç—è–≥ (–æ–±–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
    toleranceZone.style.background = 'linear-gradient(90deg, #2ecc71, #27ae60)';
  } else {
    // –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è (—Ä–∞–∑–Ω—ã–µ –∑–Ω–∞–∫–∏)
    toleranceZone.style.background = 'linear-gradient(90deg, #6c5ce7, #a29bfe)';
  }
}


// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
  document.getElementById('result').innerHTML = `
    <div style="color: #e74c3c; padding: 15px; background: #ffeaea; border-radius: 8px; border-left: 4px solid #e74c3c;">
      ‚ùå ${message}
    </div>
  `;
  document.getElementById('showTableBtn').style.display = 'none';
  document.getElementById('calculation-details').style.display = 'none';
  document.getElementById('tolerance-visualization').style.display = 'none';
}



document.addEventListener('DOMContentLoaded', function() {
  updateFitInfo(); // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
});


async function searchStandard() {
    const query = document.getElementById('query').value.toLowerCase();
    const standards = await loadKnowledgeData('standards.json');
    let result = '';
  
    for (const [code, data] of Object.entries(standards)) {
      if (query.includes(code) || 
          query.includes('—Ç–≤—ë—Ä–¥–æ—Å—Ç—å') && data.hardness_limit ||
          query.includes('—Ä–∞–¥–∏—É—Å') && data.radius) {
        result += `<strong>${code}</strong>:<br>`;
        for (const [key, value] of Object.entries(data)) {
          if (key !== 'name') result += `${key}: ${value}<br>`;
        }
      }
    }
  
    document.getElementById('standardResult').innerHTML = 
      result || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
  }

async function generateNCR() {
  const itemId = document.getElementById('itemId').value;
  const type = document.getElementById('ncrType').value;
  const templates = await loadKnowledgeData('ncr_templates.json');
  const template = templates[type];
  
  document.getElementById('ncrOutput').innerHTML = `
    <strong>${template.title}</strong><br>
    –ò–∑–¥–µ–ª–∏–µ: ${itemId}<br>
    –¢—Ä–µ–±—É–µ—Ç—Å—è: ${template.fields.join(', ')}<br>
    <em>–ß–µ—Ä–Ω–æ–≤–∏–∫ NCR –≥–æ—Ç–æ–≤. –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é?</em>
  `;
}

async function loadCompany() {
  const companies = await loadKnowledgeData('companies.json');
  const name = document.getElementById('companySelect').value;
  const c = companies[name];
  
  if (c) {
    document.getElementById('companyInfo').innerHTML = `
      <strong>${name}</strong><br>
      –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${c.inspections.length}<br>
      NCR: ${c.ncr_count}<br>
      –ü–æ—Å–ª–µ–¥–Ω—è—è: ${c.last_update || '–Ω–µ—Ç'}
    `;
  }
}
// –ù–û–í–ê–Ø checkDocs()

async function checkDocs() {
  const productType = document.getElementById('productTypeChecklist').value;
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –∫–∞—Å—Å–µ—Ç—ã (products.json)
    const products = await loadKnowledgeData('products.json');
    const product = products[productType];
    
    if (!product) {
      document.getElementById('checklistResult').innerHTML = '–¢–∏–ø –∏–∑–¥–µ–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω';
      return;
    }

    // –¢—Ä–µ–±—É–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const requiredDocs = product.required_docs || [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –∏–∑ Firebase
    const db = window.db;
    const snapshot = await db.collection('items')
      .where('type', '==', productType)
      .limit(5)
      .get();
    
    if (snapshot.empty) {
      document.getElementById('checklistResult').innerHTML = `–ò–∑–¥–µ–ª–∏—è —Ç–∏–ø–∞ "${productType}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`;
      return;
    }

    let html = `<h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç–∏: ${productType}</h3>`;
    
    for (const doc of snapshot.docs) {
      const item = doc.data();
      html += `<div class="item-check"><strong>${item.id}</strong><br>`;
      
      // –î–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ñ–∞–π–ª–∞–º–∏)
      const presentDocs = item.documents || [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      requiredDocs.forEach(docName => {
        // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç - –æ–±—ä–µ–∫—Ç (—Å —Ñ–∞–π–ª–æ–º), –∏—â–µ–º –ø–æ name
        const isPresent = Array.isArray(presentDocs) && 
          presentDocs.some(d => typeof d === 'object' ? d.name === docName : d === docName);
        
        html += `
          <div class="doc-line">
            <span class="${isPresent ? 'present' : 'missing'}">
              ${isPresent ? '‚úÖ' : '‚ùå'} ${docName}
            </span>
          </div>
        `;
      });
      
      html += '<hr></div>';
    }
    
    document.getElementById('checklistResult').innerHTML = html;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç–∏:', error);
    document.getElementById('checklistResult').innerHTML = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
  }
}


async function showTable() {
  const sizeInput = document.getElementById('size');
  const fitSelect = document.getElementById('fit');

  const size = parseFloat(sizeInput.value);
  const fit = fitSelect.value;

  if (isNaN(size) || size <= 0) {
    alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä!');
    return;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const tolerances = await loadKnowledgeData('tolerances.json');

  if (!tolerances[fit]) {
    alert(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ ${fit} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
    return;
  }

  const rows = tolerances[fit];
  const intervalRow = rows.find(r => size > r.min && size <= r.max);

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª–∫—É
  document.getElementById('refSize').textContent = size;
  document.getElementById('refFit').textContent = fit.toUpperCase();

  const tableBody = rows.map(row => {
    const isActive = intervalRow && size > row.min && size <= row.max;
    return `
      <tr class="${isActive ? 'active-row' : ''}">
        <td>${row.min}‚Äì${row.max}</td>
        <td>${row.upper} –º–∫–º</td>
        <td>${row.lower} –º–∫–º</td>
      </tr>
    `;
  }).join('');

  document.getElementById('referenceTable').innerHTML = `
    <p><strong>–ì–û–°–¢ 25346-89</strong> ‚Äî –ü–æ–ª—è –¥–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ <strong>${fit.toUpperCase()}</strong></p>
    <table class="std-table">
      <thead>
        <tr>
          <th>–ò–Ω—Ç–µ—Ä–≤–∞–ª, –º–º</th>
          <th>–í–µ—Ä—Ö–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ</th>
          <th>–ù–∏–∂–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ</th>
        </tr>
      </thead>
      <tbody>
        ${tableBody}
      </tbody>
    </table>
    <p><small>üí° –ü–æ–¥—Å–≤–µ—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ä–∞–∑–º–µ—Ä—É <strong>${size} –º–º</strong>.</small></p>
  `;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  document.getElementById('tableModal').style.display = 'flex';
}

// function showTable() {
//   const sizeInput = document.getElementById('size');
//   const fitSelect = document.getElementById('fit');

//   const size = sizeInput.value.trim();
//   const fit = fitSelect.value;

//   // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
//   if (!size || isNaN(size) || size <= 0) {
//     alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä!');
//     return;
//   }

//   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
//   const modal = document.getElementById('tableModal');
//   document.getElementById('refSize').textContent = size;
//   document.getElementById('refFit').textContent = fit;

//   // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å: –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
//   const interval = getSizeInterval(size);
//   const toleranceData = getToleranceData(fit, interval);

//   document.getElementById('referenceTable').innerHTML = `
//     <strong>–ì–û–°–¢ 25346-89 ‚Äî –ü–æ–ª—è –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–∫–∏</strong><br>
//     <strong>–¢–∞–±–ª–∏—Ü–∞ –¥–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:</strong> ${interval} –º–º<br><br>
//     <code>
//       –ü–æ—Å–∞–¥–∫–∞: ${fit.toUpperCase()}<br>
//       –í–µ—Ä—Ö–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${toleranceData.upper} –º–∫–º (${(toleranceData.upper / 1000).toFixed(3)} –º–º)<br>
//       –ù–∏–∂–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${toleranceData.lower} –º–∫–º (${(toleranceData.lower / 1000).toFixed(3)} –º–º)<br>
//       –ü–æ–ª–µ –¥–æ–ø—É—Å–∫–∞: ${(toleranceData.upper - toleranceData.lower)} –º–∫–º
//     </code><br><br>
//     <small>–î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –†–µ–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ‚Äî –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –ì–û–°–¢.</small>
//   `;

//   modal.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
// }

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeTable() {
  document.getElementById('tableModal').style.display = 'none';
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞–∑–º–µ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä —É–ø—Ä–æ—â—ë–Ω)
function getSizeInterval(size) {
  const val = parseFloat(size);
  if (val <= 3) return '—Å–≤. 0 –¥–æ 3';
  if (val <= 6) return '—Å–≤. 3 –¥–æ 6';
  if (val <= 10) return '—Å–≤. 6 –¥–æ 10';
  if (val <= 18) return '—Å–≤. 10 –¥–æ 18';
  if (val <= 30) return '—Å–≤. 18 –¥–æ 30';
  if (val <= 50) return '—Å–≤. 30 –¥–æ 50';
  if (val <= 80) return '—Å–≤. 50 –¥–æ 80';
  // ... –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
  return '—Å–≤. 30 –¥–æ 50'; // fallback
}

// –£—Å–ª–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ JSON –∏–ª–∏ –±–∞–∑—É)
function getToleranceData(fit, interval) {
  const data = {
    'h7': { upper: 0, lower: -25 },
    'H8': { upper: 39, lower: 0 },
    'k6': { upper: 18, lower: 2 }
  };
  return data[fit] || { upper: 0, lower: 0 };
}

  // function showTable() {
  //   const size = document.getElementById('size').value;
  //   const fit = document.getElementById('fit').value;
  //   document.getElementById('refSize').textContent = size;
  //   document.getElementById('refFit').textContent = fit;
  
  //   // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –ì–û–°–¢
  //   const std = {
  //     "–ì–û–°–¢ 25346-89": {
  //       "title": "–ü–æ–ª—è –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–∫–∏",
  //       "table": "–¢–∞–±–ª–∏—Ü–∞ 1",
  //       "data": `–ò–Ω—Ç–µ—Ä–≤–∞–ª: 30‚Äì50 –º–º | h7: 0 / -25 –º–∫–º`
  //     }
  //   };
  
  //   document.getElementById('referenceTable').innerHTML = `
  //     <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${std["–ì–û–°–¢ 25346-89"].title}<br>
  //     <strong>${std["–ì–û–°–¢ 25346-89"].table}:</strong><br>
  //     <code>${std["–ì–û–°–¢ 25346-89"].data}</code><br>
  //     <small>–î–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞—Å—Å–µ—Ç—ã –∑–Ω–∞–Ω–∏–π</small>
  //   `;
  // }

  function checkReminders() {
    const today = new Date().toISOString().split('T')[0];
    const mockReminders = [
      { text: "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–≤–∞–Ω–æ–≤–∞ ‚Äî –∑–∞–≤—Ç—Ä–∞", urgent: true },
      { text: "–£–ó–ö –¥–ª—è ITEM-001 ‚Äî —Å—Ä–æ–∫ 15.04", urgent: false }
    ];
  
    const list = document.getElementById('reminderList');
    list.innerHTML = mockReminders
      .map(r => `<p style="color:${r.urgent ? 'red' : 'black'}">${r.text}</p>`)
      .join('');
  }

  function addItem() {
    const type = document.getElementById('productType').value;
    const diameter = document.getElementById('diameter')?.value;
    const wall_thickness = document.getElementById('wall_thickness')?.value;
    const pn = document.getElementById('pn')?.value;
    const material = document.getElementById('material').value;
    
    const id = `ITEM-${type.slice(0,3).toUpperCase()}-${diameter || pn}-${Date.now() % 1000}`;
    
    document.getElementById('itemResult').innerHTML = `
      ‚úÖ –°–æ–∑–¥–∞–Ω–æ: <strong>${id}</strong><br>
      –¢–∏–ø: ${type}<br>
      –†–∞–∑–º–µ—Ä: ${diameter ? diameter + 'x' + wall_thickness : pn}<br>
      –ú–∞—Ç–µ—Ä–∏–∞–ª: ${material}<br>
      <a href="#" onclick="showItem('${id}')">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>
    `;
  }

  async function loadTemplate() {
    const products = await loadKnowledgeData('products.json');
    const type = document.getElementById('productType').value;
    const product = products[type];
    const container = document.getElementById('paramsForm');
    
    let form = '';
    if (product.params.includes('diameter')) {
      form += '–î–∏–∞–º–µ—Ç—Ä, –º–º: <input type="number" id="diameter"><br>';
    }
    if (product.params.includes('wall_thickness')) {
      form += '–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏, –º–º: <input type="number" id="wall_thickness"><br>';
    }
    if (product.params.includes('pn')) {
      form += 'PN: <input type="number" id="pn"><br>';
    }
    if (product.params.includes('face_type')) {
      form += '–¢–∏–ø —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è: <select id="face_type"><option>RF</option><option>FF</option></select><br>';
    }
    form += `–ú–∞—Ç–µ—Ä–∏–∞–ª: <select id="material">
      <option>13–•–§–ê</option>
      <option>09–ì2–°</option>
      <option>12–•18–ù10–¢</option>
    </select><br>`;
    
    container.innerHTML = form;
  }
  
  async function translatePhrase() {
    const translations = await loadKnowledgeData('translations.json');
    const phrase = document.getElementById('phraseSelect').value;
    const eng = translations[phrase];
    
    document.getElementById('translationResult').innerHTML = `
      <strong>RU:</strong> ${phrase}<br>
      <strong>EN:</strong> ${eng}
    `;
  }
  
  async function compareStandards() {
    const comparisons = await loadKnowledgeData('comparison.json');
    const key = document.getElementById('compareSelect').value;
    const data = comparisons[key];
  
    let html = `<strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${key.replace('_', ' ‚Üí ')}</strong><br>`;
    for (const [param, values] of Object.entries(data)) {
      html += `<br><em>${param}:</em><br>`;
      for (const [std, value] of Object.entries(values)) {
        if (std !== "conclusion") html += `${std}: ${value}<br>`;
      }
      html += `<strong>–í—ã–≤–æ–¥:</strong> ${values.conclusion}<br>`;
    }
  
    document.getElementById('comparisonResult').innerHTML = html;
  }

  function toggleSidebar() {
    document.getElementById('sidebar').classList.toggle('open');
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
async function loadPageScripts(pageId) {
  if (pageId === 'page-analytics') {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º Chart.js –ø–µ—Ä–µ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    return new Promise((resolve, reject) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ Chart.js
      if (typeof Chart !== 'undefined') {
        resolve();
        return;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º Chart.js
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }
}

  async function showPage(pageId) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
    document.getElementById('sidebar').classList.remove('open');

     // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  try {
    await loadPageScripts(pageId);
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
  }
    
    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º
    const existingPage = document.getElementById(pageId);
    if (existingPage) {
      existingPage.classList.add('active');
      
      // ‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      setTimeout(() => {
        switch(pageId) {
          case 'page-inspection':
            if (typeof loadItemsForInspection === 'function') {
              loadItemsForInspection();
              showRecentInspections();
            }
            break;
          case 'page-ncr':
            if (typeof loadItemsForNCR === 'function') {
              loadItemsForNCR();
              showRecentNCRs();
            }
            break;
          case 'page-statistics':
            if (typeof loadStatistics === 'function') {
              loadStatistics();
            }
            break;
          case 'page-reminders':
            if (typeof loadReminders === 'function') {
              loadReminders();
            }
            break;
                  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–∞–Ω–∏–π
      case 'page-company':
        if (typeof loadCompaniesList === 'function' && typeof loadCompaniesForStats === 'function') {
          loadCompaniesList();
          loadCompaniesForStats();
        }
        break;
          // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
          case 'page-analytics':
            if (typeof loadAnalytics === 'function') {
              loadAnalytics();
            }
            break;
        }
      }, 100);
      
      return;
    }
  
    // –ö–∞—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    const pageFiles = {
      'page-inspector-profile': 'pages/page-inspector-profile.html',
      'page-skill-tree': 'pages/page-skill-tree.html',
      'page-analytics': 'pages/page-analytics.html',
      'page-add-item': 'pages/page-add-item.html',
      'page-materials': 'pages/page-materials.html',
      'page-inspection': 'pages/page-inspection.html',
      'page-ncr': 'pages/page-ncr.html',
      'page-company': 'pages/page-company.html',
      'page-checklist': 'pages/page-checklist.html',
      'page-standards': 'pages/page-standards.html',
      'page-compare': 'pages/page-compare.html',
      'page-reminders': 'pages/page-reminders.html',
      'page-translate': 'pages/page-translate.html',
      'page-tolerance': 'pages/page-tolerance.html',
      'page-statistics': 'pages/page-statistics.html',
      'page-help': 'pages/page-help.html',
      'page-smart': 'pages/page-smart.html',
      'page-mailer': 'pages/page-mailer.html'
    };
  
    const url = pageFiles[pageId];
    if (!url) {
      console.error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', pageId);
      return;
    }
  
    try {
      const response = await fetch(url);
      const html = await response.text();
  
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const newPage = document.createElement('div');
      newPage.id = pageId;
      newPage.className = 'page';
      newPage.innerHTML = html;
  
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
      document.getElementById('mainContent').appendChild(newPage);
  
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
      newPage.classList.add('active');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º JS –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const jsFile = url.replace('.html', '.js') + '?v=' + Date.now();
if (jsFile !== url) {
  const script = document.createElement('script');
  script.src = jsFile;
  document.head.appendChild(script);
}
      // // –ó–∞–≥—Ä—É–∂–∞–µ–º JS –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      // const jsFile = url.replace('.html', '.js');
      // if (jsFile !== url) {
      //   const script = document.createElement('script');
      //   script.src = jsFile;
      //   document.head.appendChild(script);
      // }
      
      // ‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      setTimeout(() => {
        switch(pageId) {
          case 'page-inspection':
            if (typeof loadItemsForInspection === 'function') {
              loadItemsForInspection();
              showRecentInspections();
            }
            break;
          case 'page-ncr':
            if (typeof loadItemsForNCR === 'function') {
              loadItemsForNCR();
              showRecentNCRs();
            }
            break;
          case 'page-statistics':
            if (typeof loadStatistics === 'function') {
              loadStatistics();
            }
            break;
          case 'page-reminders':
            if (typeof loadReminders === 'function') {
              loadReminders();
            }
            break;
                // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    case 'page-company':
      if (typeof loadCompaniesList === 'function' && typeof loadCompaniesForStats === 'function') {
        loadCompaniesList();
        loadCompaniesForStats();
      }
      break;
          // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
          case 'page-analytics':
            if (typeof loadAnalytics === 'function') {
              loadAnalytics();
            }
            break;
        }
      }, 100);
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    }
  }
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
async function loadCompaniesList() {
  try {
    const db = window.db;
    const snapshot = await db.collection('companies')
      .orderBy('createdAt', 'desc')
      .get();

    let html = '';
    snapshot.forEach(doc => {
      const company = doc.data();
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ standards
      let standardsDisplay = '‚Äî';
      try {
        if (company.standards && Array.isArray(company.standards) && company.standards.length > 0) {
          standardsDisplay = company.standards.join(', ');
        }
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ standards –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:', company.name, e);
        standardsDisplay = '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö';
      }
      
      html += `
        <div class="company-card">
          <strong>${company.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</strong><br>
          ID: ${company.id || '‚Äî'}<br>
          –ö–æ–Ω—Ç–∞–∫—Ç: ${company.contact || '‚Äî'}<br>
          –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã: ${standardsDisplay}
        </div>
        <hr>
      `;
    });

    document.getElementById('companiesList').innerHTML = html || '–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç';

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π:', error);
    document.getElementById('companiesList').innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π';
  }
}


// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadCompaniesForStats() {
  try {
    const db = window.db;
    const snapshot = await db.collection('companies')
      .orderBy('name')
      .get();

    const select = document.getElementById('companyForStats');
    select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ --</option>';

    snapshot.forEach(doc => {
      const company = doc.data();
      const option = document.createElement('option');
      option.value = company.id || '';
      option.textContent = company.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      select.appendChild(option);
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}


// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø—É—Å–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    showPage('page-tolerance');
  });

  document.getElementById('knowledgePack').addEventListener('change', async function(e) {
    const file = e.target.files[0];
    if (!file) return;

    try {
        alert('–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–∞—Å—Å–µ—Ç—ã...');

        const zip = new JSZip();
        const content = await zip.loadAsync(file);

        for (const [filename, zipEntry] of Object.entries(content.files)) {
            if (zipEntry.dir) continue;
        
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø–∞–ø–æ–∫)
            const cleanFilename = filename.split('/').pop();
        
            const text = await zipEntry.async('text');
        
            try {
                JSON.parse(text); // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π JSON
                localStorage.setItem(`knowledge_${cleanFilename}`, text);
                console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${cleanFilename}`);
            } catch (err) {
                console.warn(`–§–∞–π–ª ${cleanFilename} –Ω–µ JSON ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω`);
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        localStorage.setItem('knowledgePack_loaded', 'true');
        localStorage.setItem('knowledgePack_name', file.name);

        alert(`–ö–∞—Å—Å–µ—Ç–∞ "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–∞!`);
        // location.reload();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∫–∞—Å—Å–µ—Ç—ã.');
    }
});

async function testFirebase() {
  try {
    const db = window.db;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const docRef = await db.collection('test').add({
      message: 'Firebase —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      timestamp: new Date()
    });
    
    console.log('‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID:', docRef.id);
    
    // –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ
    const doc = await db.collection('test').doc(docRef.id).get();
    if (doc.exists) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', doc.data());
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await db.collection('test').doc(docRef.id).delete();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Firebase:', error);
  }
}

// –í—ã–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  if (window.db) {
    console.log('Firebase SDK –∑–∞–≥—Ä—É–∂–µ–Ω');
    // testFirebase(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è —Ç–µ—Å—Ç–∞
  } else {
    console.log('Firebase –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω');
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —ç–º–æ—Ü–∏–∏
let selectedEmoji = 'üë®‚Äçüíº';
let feedbackType = 'inspector'; // 'inspector' –∏–ª–∏ 'developer'

// –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏
function selectEmoji(emoji) {
  selectedEmoji = emoji;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —É–≥–ª—É textarea
  document.getElementById('emoji-corner').textContent = emoji;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
  document.querySelectorAll('.emoji-option').forEach(option => {
    option.classList.remove('selected');
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
  event?.target?.classList?.add('selected');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–¥–±—ç–∫–∞
  if (emoji === 'üë®‚Äçüíº') {
    feedbackType = 'inspector';
  } else if (emoji === 'üë®‚Äçüíª') {
    feedbackType = 'developer';
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const textarea = document.getElementById('developer-feedback');
  if (feedbackType === 'inspector') {
    textarea.placeholder = "–æ—Ç –∏–Ω—Å—Ç–ø–µ–∫—Ç–æ—Ä–∞...";
  } else {
    textarea.placeholder = "–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...";
  }
}
// // –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏
// function selectEmoji(emoji) {
//   selectedEmoji = emoji;
  
//   // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏
//   document.getElementById('emoji-display').textContent = emoji;
  
//   // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
//   document.querySelectorAll('.emoji-option').forEach(option => {
//     option.classList.remove('selected');
//   });
  
//   // –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
//   event?.target?.classList?.add('selected');
  
//   // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–¥–±—ç–∫–∞
//   if (emoji === 'üë®‚Äçüíº') {
//     feedbackType = 'inspector';
//   } else if (emoji === 'üë®‚Äçüíª') {
//     feedbackType = 'developer';
//   }
  
//   // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
//   const textarea = document.getElementById('developer-feedback');
//   if (feedbackType === 'inspector') {
//     textarea.placeholder = "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∑–∞–º–µ—á–∞–Ω–∏—è, –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...";
//   } else {
//     textarea.placeholder = "–°–æ–æ–±—â–∏—Ç–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, –±–∞–≥–∞—Ö, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ...";
//   }
// }

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function openDeveloperModal() {
  document.getElementById('developer-modal').style.display = 'block';
  loadDeveloperNotifications();
  loadFeedbackHistory();
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —ç–º–æ—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  selectEmoji('üë®‚Äçüíº');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeDeveloperModal() {
  document.getElementById('developer-modal').style.display = 'none';
}

// –ó–∞–∫—Ä—ã—Ç—å –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
window.onclick = function(event) {
  const modal = document.getElementById('developer-modal');
  if (event.target == modal) {
    modal.style.display = 'none';
  }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
async function submitDeveloperFeedback() {
  const feedbackText = document.getElementById('developer-feedback').value.trim();
  
  if (!feedbackText) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
    return;
  }
  
  try {
    const db = window.db;
    if (!db) {
      throw new Error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    const fullMessage = `${selectedEmoji} ${feedbackText}`;
    
    if (feedbackType === 'inspector') {
      // –û–±—ã—á–Ω—ã–π —Ñ–∏–¥–±—ç–∫ –≤ /feedback/
      await db.collection('feedback').add({
        message: fullMessage,
        emoji: selectedEmoji,
        type: 'inspector',
        author: localStorage.getItem('inspector_name') || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä',
        timestamp: new Date(),
        status: 'new'
      });
      
      alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±—ç–∫!');
      
    } else {
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ /notifications/
      await db.collection('notifications').add({
        text: fullMessage,
        emoji: selectedEmoji,
        type: 'technical',
        author: localStorage.getItem('inspector_name') || '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä',
        date: new Date(),
        priority: 'medium'
      });
      
      alert('‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!');
    }
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('developer-feedback').value = '';
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —ç–º–æ—Ü–∏—é
    selectEmoji('üë®‚Äçüíº');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    loadFeedbackHistory();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async function loadDeveloperNotifications() {
  try {
    const db = window.db;
    if (!db) return;
    
    const snapshot = await db.collection('notifications')
      .orderBy('date', 'desc')
      .limit(3)
      .get();
    
    const notificationsContainer = document.getElementById('dev-notifications');
    
    if (snapshot.empty) {
      notificationsContainer.innerHTML = '<p>üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
      return;
    }
    
    let html = '<h3>üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</h3>';
    snapshot.forEach(doc => {
      const notif = doc.data();
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
      const displayText = notif.emoji ? `${notif.emoji} ${notif.text.replace(notif.emoji + ' ', '')}` : notif.text;
      html += `<p>‚Ä¢ ${displayText}</p>`;
    });
    
    notificationsContainer.innerHTML = html;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    document.getElementById('dev-notifications').innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
async function loadFeedbackHistory() {
  try {
    const db = window.db;
    if (!db) return;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–∏–¥–±—ç–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const feedbackSnapshot = await db.collection('feedback')
      .orderBy('timestamp', 'desc')
      .limit(10)
      .get();
    
    const historyContainer = document.getElementById('feedback-list');
    
    if (feedbackSnapshot.empty) {
      historyContainer.innerHTML = '<p>üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞</p>';
      return;
    }
    
    let html = '';
    feedbackSnapshot.forEach(doc => {
      const feedback = doc.data();
      const date = new Date(feedback.timestamp.toDate ? feedback.timestamp.toDate() : feedback.timestamp);
      const formattedDate = date.toLocaleString('ru-RU');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
      const displayText = feedback.emoji ? feedback.message.replace(feedback.emoji + ' ', '') : feedback.message;
      const displayEmoji = feedback.emoji || 'üìù';
      
      html += `
        <div class="feedback-item">
          <div class="feedback-date">${displayEmoji} ${formattedDate}</div>
          <div class="feedback-text">${displayText}</div>
          <div class="feedback-status status-${feedback.status}">
            –°—Ç–∞—Ç—É—Å: ${getStatusText(feedback.status)}
          </div>
        </div>
      `;
    });
    
    historyContainer.innerHTML = html;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    document.getElementById('feedback-list').innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</p>';
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
  const statuses = {
    'new': '–ù–æ–≤–æ–µ',
    'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
    'done': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
  };
  return statuses[status] || status;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (document.getElementById('dev-notifications')) {
    loadDeveloperNotifications();
  }
});


  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
  document.addEventListener('DOMContentLoaded', function() {
    const savedKey = localStorage.getItem('openrouter_api_key');
    if (savedKey) {
      document.getElementById('apiKey').value = savedKey;
    }
  });

