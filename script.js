// const db = window.db;

// –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ
async function testAddItem() {
    try {
        const docRef = await db.collection('items').add({
            type: "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ",
            createdAt: new Date()
        });
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ —Å ID:', docRef.id);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    }
}

async function loadKnowledgeData(filename) {
  return new Promise((resolve) => {
    if (localStorage.getItem('knowledgePack_loaded')) {
      const data = localStorage.getItem(`knowledge_${filename}`);
      if (data) {
        try {
          if (filename.endsWith('.js')) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º JS-—Ñ–∞–π–ª
            const scriptFn = new Function(data);
            scriptFn(); // —Å–æ–∑–¥–∞—ë—Ç window.materialsByCategory
            resolve(window.materialsByCategory || {});
          } else {
            // –ü–∞—Ä—Å–∏–º –∫–∞–∫ JSON
            resolve(JSON.parse(data));
          }
        } catch (e) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${filename}:`, e);
          resolve({});
        }
      } else {
        console.warn(`–§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Å—Å–µ—Ç–µ`);
        resolve({});
      }
    } else {
      // –†–µ–∑–µ—Ä–≤: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ /data/
      fetch(`data/${filename}`)
        .then(r => r.text()) // –≤—Å–µ–≥–¥–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        .then(data => {
          if (filename.endsWith('.js')) {
            const scriptFn = new Function(data);
            scriptFn();
            resolve(window.materialsByCategory || {});
          } else {
            resolve(JSON.parse(data));
          }
        })
        .catch(err => {
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${filename} –∏–∑ data/`, err);
          resolve({});
        });
    }
  });
}


function unloadKnowledgePack() {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–∞—Å—Å–µ—Ç—É?')) {
        Object.keys(localStorage)
            .filter(k => k.startsWith('knowledge_'))
            .forEach(k => localStorage.removeItem(k));
        localStorage.removeItem('knowledgePack_loaded');
        localStorage.removeItem('knowledgePack_name');
        alert('–ö–∞—Å—Å–µ—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞');
        location.reload();
    }
}

function updateFitInfo() {
  const fitSelect = document.getElementById('fit');
  const infoContainer = document.getElementById('fit-info');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
  if (!fitSelect || !infoContainer) return;
  
  const fit = fitSelect.value;
  
  let systemText = '';
  let typeText = '';
  let systemClass = '';
  let typeClass = '';
  
  switch(fit) {
    case 'h7':
      systemText = '–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∞';
      typeText = '–ó–∞–∑–æ—Ä';
      systemClass = 'system-badge';
      typeClass = 'type-badge';
      break;
    case 'H8':
      systemText = '–°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è';
      typeText = '–ó–∞–∑–æ—Ä';
      systemClass = 'system-badge';
      typeClass = 'type-badge';
      break;
    case 'k6':
      systemText = '–°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∞';
      typeText = '–ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è';
      systemClass = 'system-badge';
      typeClass = 'type-badge';
      break;
    default:
      systemText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      typeText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      systemClass = 'system-badge';
      typeClass = 'type-badge';
  }
  
  infoContainer.innerHTML = `
    <div class="info-badge ${systemClass}">${systemText}</div>
    <div class="info-badge ${typeClass}">${typeText}</div>
  `;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ø—É—Å–∫–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ page-tolerance.js)
function initTolerancePage() {
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ DOM –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
  setTimeout(() => {
    updateFitInfo();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const fitSelect = document.getElementById('fit');
    if (fitSelect) {
      fitSelect.addEventListener('change', updateFitInfo);
    }
  }, 100);
}
async function calculate() {
  const sizeInput = document.getElementById('size').value;
  const size = parseFloat(sizeInput);
  const fit = document.getElementById('fit').value;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
  if (!size || size <= 0) {
    showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä');
    return;
  }

  try {
    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const fits = await loadKnowledgeData('tolerances.json'); // –∏–ª–∏ 'tolerances.json' ‚Äî –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å–∞–¥–∫–∏
    if (!fits[fit]) {
      showError('–ö–≤–∞–ª–∏—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const table = fits[fit];

    // 4. –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å—Ç—Ä–æ–∫
    const row = table.find(item => {
      const min = parseFloat(item.min);
      const max = parseFloat(item.max);
      return size > min && size <= max;
    });

    if (!row) {
      showError('–†–∞–∑–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ì–û–°–¢ 25346');
      return;
    }

    // 5. –†–∞—Å—á—ë—Ç
    const upper = row.upper / 1000; // –º–º
    const lower = row.lower / 1000;
    const diff = upper - lower;

    const upperStr = upper.toFixed(3);
    const lowerStr = lower.toFixed(3);
    const diffStr = diff.toFixed(3);

    // 6. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    document.getElementById('result').innerHTML = `
      <strong>‚åÄ${sizeInput}${fit}</strong>
      <div style="margin-top: 10px; font-size: 16px;">
        –í–µ—Ä—Ö–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: <span style="color: #e74c3c;">${upper >= 0 ? '+' : ''}${upperStr}</span> –º–º<br>
        –ù–∏–∂–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: <span style="color: #e74c3c;">${lower >= 0 ? '+' : ''}${lowerStr}</span> –º–º<br>
        –ü–æ–ª–µ –¥–æ–ø—É—Å–∫–∞: <span style="color: #6c5ce7; font-weight: bold;">${diffStr}</span> –º–º
      </div>
    `;



    // 7. –î–µ—Ç–∞–ª–∏
    document.getElementById('interval-value').textContent = `${row.min}-${row.max} –º–º`;
    document.getElementById('upper-value').textContent = `${upper >= 0 ? '+' : ''}${upperStr} –º–º`;
    document.getElementById('lower-value').textContent = `${lower >= 0 ? '+' : ''}${lowerStr} –º–º`;
    document.getElementById('tolerance-value').textContent = `${diffStr} –º–º`;
    document.getElementById('calculation-details').style.display = 'block';

    // 8. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    setTimeout(() => updateVisualization(upper, lower, size), 100);

    // 9. –ö–Ω–æ–ø–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    document.getElementById('showTableBtn').style.display = 'block';

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ calculate():', error); // üî• –¥–æ–±–∞–≤–ª–µ–Ω–æ!
    showError('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: ' + error.message);
  }
}


// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø—É—Å–∫–∞
function updateVisualization(upper, lower, size) {
  const visualization = document.getElementById('tolerance-visualization');
  const toleranceZone = document.getElementById('tolerance-zone');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  if (!visualization || !toleranceZone) return;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
  visualization.style.display = 'block';
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± (–ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ –º–º)
  const scale = 1000; // –£–≤–µ–ª–∏—á–∏–ª –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
  const zoneWidth = Math.abs(upper - lower) * scale;
  
  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∑–æ–Ω—É –¥–æ–ø—É—Å–∫–∞
  const zonePosition = lower * scale;
  
  toleranceZone.style.width = `${zoneWidth}px`;
  toleranceZone.style.left = `calc(50% + ${zonePosition}px)`;
  
  // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Å–∞–¥–∫–∏
  if (upper <= 0 && lower < 0) {
    // –ó–∞–∑–æ—Ä (–æ–±–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π 0)
    toleranceZone.style.background = 'linear-gradient(90deg, #ff6b6b, #e74c3c)';
  } else if (upper > 0 && lower >= 0) {
    // –ù–∞—Ç—è–≥ (–æ–±–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
    toleranceZone.style.background = 'linear-gradient(90deg, #2ecc71, #27ae60)';
  } else {
    // –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è (—Ä–∞–∑–Ω—ã–µ –∑–Ω–∞–∫–∏)
    toleranceZone.style.background = 'linear-gradient(90deg, #6c5ce7, #a29bfe)';
  }
}
// // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
// function updateVisualization(upper, lower, size) {
//   const visualization = document.getElementById('tolerance-visualization');
//   const toleranceZone = document.getElementById('tolerance-zone');
  
//   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
//   visualization.style.display = 'block';
  
//   // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–æ–Ω—ã –¥–æ–ø—É—Å–∫–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω—É–ª—è)
//   const scale = 2000; // –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ –º–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
//   const zoneWidth = Math.abs(upper - lower) * scale;
//   const zonePosition = (lower * scale) + 50; // 50% + —Å–º–µ—â–µ–Ω–∏–µ
  
//   toleranceZone.style.width = `${zoneWidth}px`;
//   toleranceZone.style.left = `calc(50% + ${zonePosition}px)`;
  
//   // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ—Å–∞–¥–∫–∏
//   if (upper <= 0 && lower < 0) {
//     toleranceZone.style.background = 'linear-gradient(90deg, #e74c3c, #ff6b6b)'; // –ó–∞–∑–æ—Ä
//   } else if (upper > 0 && lower >= 0) {
//     toleranceZone.style.background = 'linear-gradient(90deg, #2ecc71, #27ae60)'; // –ù–∞—Ç—è–≥
//   } else {
//     toleranceZone.style.background = 'linear-gradient(90deg, #6c5ce7, #a29bfe)'; // –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è
//   }
// }

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
  document.getElementById('result').innerHTML = `
    <div style="color: #e74c3c; padding: 15px; background: #ffeaea; border-radius: 8px; border-left: 4px solid #e74c3c;">
      ‚ùå ${message}
    </div>
  `;
  document.getElementById('showTableBtn').style.display = 'none';
  document.getElementById('calculation-details').style.display = 'none';
  document.getElementById('tolerance-visualization').style.display = 'none';
}

// // –ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
// function showTable() {
//   const size = document.getElementById('size').value;
//   const fit = document.getElementById('fit').value;
  
//   // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
//   const modal = document.createElement('div');
//   modal.style.cssText = `
//     position: fixed;
//     top: 0;
//     left: 0;
//     width: 100%;
//     height: 100%;
//     background: rgba(0,0,0,0.8);
//     display: flex;
//     justify-content: center;
//     align-items: center;
//     z-index: 10000;
//   `;
  
//   modal.innerHTML = `
//     <div style="background: white; padding: 30px; border-radius: 15px; max-width: 500px; margin: 20px;">
//       <h3>üìä –§—Ä–∞–≥–º–µ–Ω—Ç –ì–û–°–¢ 25346-89</h3>
//       <p><strong>–î–∏–∞–º–µ—Ç—Ä:</strong> ‚åÄ${size} –º–º</p>
//       <p><strong>–ü–æ—Å–∞–¥–∫–∞:</strong> ${fit}</p>
//       <p><strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç:</strong> –ì–û–°–¢ 25346-89</p>
//       <p><strong>–†–∞–∑–¥–µ–ª:</strong> –ü–æ–ª—è –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–∫–∏</p>
//       <p style="color: #666; font-size: 14px;">
//         * –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
//       </p>
//       <button onclick="this.parentElement.parentElement.remove()" 
//               style="background: #6c5ce7; color: white; border: none; padding: 10px 20px; border-radius: 8px; cursor: pointer;">
//         –ó–∞–∫—Ä—ã—Ç—å
//       </button>
//     </div>
//   `;
  
//   document.body.appendChild(modal);
// }

document.addEventListener('DOMContentLoaded', function() {
  updateFitInfo(); // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
});

// function showTable() {
//   const size = document.getElementById('size').value;
//   const fit = document.getElementById('fit').value;
//   alert(`–î–∞–Ω–Ω—ã–µ –∏–∑ –ì–û–°–¢ 25346\n–†–∞–∑–º–µ—Ä: ${size} –º–º\n–ü–æ—Å–∞–¥–∫–∞: ${fit}\n(–§—Ä–∞–≥–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂—ë–Ω –∑–¥–µ—Å—å)`);
// }

async function searchStandard() {
    const query = document.getElementById('query').value.toLowerCase();
    const standards = await loadKnowledgeData('standards.json');
    let result = '';
  
    for (const [code, data] of Object.entries(standards)) {
      if (query.includes(code) || 
          query.includes('—Ç–≤—ë—Ä–¥–æ—Å—Ç—å') && data.hardness_limit ||
          query.includes('—Ä–∞–¥–∏—É—Å') && data.radius) {
        result += `<strong>${code}</strong>:<br>`;
        for (const [key, value] of Object.entries(data)) {
          if (key !== 'name') result += `${key}: ${value}<br>`;
        }
      }
    }
  
    document.getElementById('standardResult').innerHTML = 
      result || '–ù–µ –Ω–∞–π–¥–µ–Ω–æ';
  }

async function generateNCR() {
  const itemId = document.getElementById('itemId').value;
  const type = document.getElementById('ncrType').value;
  const templates = await loadKnowledgeData('ncr_templates.json');
  const template = templates[type];
  
  document.getElementById('ncrOutput').innerHTML = `
    <strong>${template.title}</strong><br>
    –ò–∑–¥–µ–ª–∏–µ: ${itemId}<br>
    –¢—Ä–µ–±—É–µ—Ç—Å—è: ${template.fields.join(', ')}<br>
    <em>–ß–µ—Ä–Ω–æ–≤–∏–∫ NCR –≥–æ—Ç–æ–≤. –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é?</em>
  `;
}

async function loadCompany() {
  const companies = await loadKnowledgeData('companies.json');
  const name = document.getElementById('companySelect').value;
  const c = companies[name];
  
  if (c) {
    document.getElementById('companyInfo').innerHTML = `
      <strong>${name}</strong><br>
      –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${c.inspections.length}<br>
      NCR: ${c.ncr_count}<br>
      –ü–æ—Å–ª–µ–¥–Ω—è—è: ${c.last_update || '–Ω–µ—Ç'}
    `;
  }
}
// –ù–û–í–ê–Ø checkDocs()

async function checkDocs() {
  const productType = document.getElementById('productTypeChecklist').value;
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –∫–∞—Å—Å–µ—Ç—ã (products.json)
    const products = await loadKnowledgeData('products.json');
    const product = products[productType];
    
    if (!product) {
      document.getElementById('checklistResult').innerHTML = '–¢–∏–ø –∏–∑–¥–µ–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω';
      return;
    }

    // –¢—Ä–µ–±—É–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const requiredDocs = product.required_docs || [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –∏–∑ Firebase
    const db = window.db;
    const snapshot = await db.collection('items')
      .where('type', '==', productType)
      .limit(5)
      .get();
    
    if (snapshot.empty) {
      document.getElementById('checklistResult').innerHTML = `–ò–∑–¥–µ–ª–∏—è —Ç–∏–ø–∞ "${productType}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`;
      return;
    }

    let html = `<h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç–∏: ${productType}</h3>`;
    
    for (const doc of snapshot.docs) {
      const item = doc.data();
      html += `<div class="item-check"><strong>${item.id}</strong><br>`;
      
      // –î–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ñ–∞–π–ª–∞–º–∏)
      const presentDocs = item.documents || [];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      requiredDocs.forEach(docName => {
        // –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç - –æ–±—ä–µ–∫—Ç (—Å —Ñ–∞–π–ª–æ–º), –∏—â–µ–º –ø–æ name
        const isPresent = Array.isArray(presentDocs) && 
          presentDocs.some(d => typeof d === 'object' ? d.name === docName : d === docName);
        
        html += `
          <div class="doc-line">
            <span class="${isPresent ? 'present' : 'missing'}">
              ${isPresent ? '‚úÖ' : '‚ùå'} ${docName}
            </span>
          </div>
        `;
      });
      
      html += '<hr></div>';
    }
    
    document.getElementById('checklistResult').innerHTML = html;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç–∏:', error);
    document.getElementById('checklistResult').innerHTML = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
  }
}

// async function checkDocs() {
//     const checklist = await loadKnowledgeData('checklist.json');
//     const type = document.getElementById('productType').value;
//     const required = checklist[type] || [];
    
//     // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –∏–∑ –±–∞–∑—ã)
//     const present = required.slice(0, -2); // –í—Å–µ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö
  
//     let html = `<strong>${type}</strong><br>`;
//     required.forEach(doc => {
//       const isOk = present.includes(doc);
//       html += `${isOk ? "‚úÖ" : "‚ùå"} ${doc}<br>`;
//     });
  
//     document.getElementById('checklistResult').innerHTML = html;
//   }

async function showTable() {
  const sizeInput = document.getElementById('size');
  const fitSelect = document.getElementById('fit');

  const size = parseFloat(sizeInput.value);
  const fit = fitSelect.value;

  if (isNaN(size) || size <= 0) {
    alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä!');
    return;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const tolerances = await loadKnowledgeData('tolerances.json');

  if (!tolerances[fit]) {
    alert(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ ${fit} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
    return;
  }

  const rows = tolerances[fit];
  const intervalRow = rows.find(r => size > r.min && size <= r.max);

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª–∫—É
  document.getElementById('refSize').textContent = size;
  document.getElementById('refFit').textContent = fit.toUpperCase();

  const tableBody = rows.map(row => {
    const isActive = intervalRow && size > row.min && size <= row.max;
    return `
      <tr class="${isActive ? 'active-row' : ''}">
        <td>${row.min}‚Äì${row.max}</td>
        <td>${row.upper} –º–∫–º</td>
        <td>${row.lower} –º–∫–º</td>
      </tr>
    `;
  }).join('');

  document.getElementById('referenceTable').innerHTML = `
    <p><strong>–ì–û–°–¢ 25346-89</strong> ‚Äî –ü–æ–ª—è –¥–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ <strong>${fit.toUpperCase()}</strong></p>
    <table class="std-table">
      <thead>
        <tr>
          <th>–ò–Ω—Ç–µ—Ä–≤–∞–ª, –º–º</th>
          <th>–í–µ—Ä—Ö–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ</th>
          <th>–ù–∏–∂–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ</th>
        </tr>
      </thead>
      <tbody>
        ${tableBody}
      </tbody>
    </table>
    <p><small>üí° –ü–æ–¥—Å–≤–µ—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ä–∞–∑–º–µ—Ä—É <strong>${size} –º–º</strong>.</small></p>
  `;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  document.getElementById('tableModal').style.display = 'flex';
}

// function showTable() {
//   const sizeInput = document.getElementById('size');
//   const fitSelect = document.getElementById('fit');

//   const size = sizeInput.value.trim();
//   const fit = fitSelect.value;

//   // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
//   if (!size || isNaN(size) || size <= 0) {
//     alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä!');
//     return;
//   }

//   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
//   const modal = document.getElementById('tableModal');
//   document.getElementById('refSize').textContent = size;
//   document.getElementById('refFit').textContent = fit;

//   // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å: –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
//   const interval = getSizeInterval(size);
//   const toleranceData = getToleranceData(fit, interval);

//   document.getElementById('referenceTable').innerHTML = `
//     <strong>–ì–û–°–¢ 25346-89 ‚Äî –ü–æ–ª—è –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–∫–∏</strong><br>
//     <strong>–¢–∞–±–ª–∏—Ü–∞ –¥–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:</strong> ${interval} –º–º<br><br>
//     <code>
//       –ü–æ—Å–∞–¥–∫–∞: ${fit.toUpperCase()}<br>
//       –í–µ—Ä—Ö–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${toleranceData.upper} –º–∫–º (${(toleranceData.upper / 1000).toFixed(3)} –º–º)<br>
//       –ù–∏–∂–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${toleranceData.lower} –º–∫–º (${(toleranceData.lower / 1000).toFixed(3)} –º–º)<br>
//       –ü–æ–ª–µ –¥–æ–ø—É—Å–∫–∞: ${(toleranceData.upper - toleranceData.lower)} –º–∫–º
//     </code><br><br>
//     <small>–î–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –†–µ–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ‚Äî –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –ì–û–°–¢.</small>
//   `;

//   modal.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
// }

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeTable() {
  document.getElementById('tableModal').style.display = 'none';
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞–∑–º–µ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä —É–ø—Ä–æ—â—ë–Ω)
function getSizeInterval(size) {
  const val = parseFloat(size);
  if (val <= 3) return '—Å–≤. 0 –¥–æ 3';
  if (val <= 6) return '—Å–≤. 3 –¥–æ 6';
  if (val <= 10) return '—Å–≤. 6 –¥–æ 10';
  if (val <= 18) return '—Å–≤. 10 –¥–æ 18';
  if (val <= 30) return '—Å–≤. 18 –¥–æ 30';
  if (val <= 50) return '—Å–≤. 30 –¥–æ 50';
  if (val <= 80) return '—Å–≤. 50 –¥–æ 80';
  // ... –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
  return '—Å–≤. 30 –¥–æ 50'; // fallback
}

// –£—Å–ª–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ JSON –∏–ª–∏ –±–∞–∑—É)
function getToleranceData(fit, interval) {
  const data = {
    'h7': { upper: 0, lower: -25 },
    'H8': { upper: 39, lower: 0 },
    'k6': { upper: 18, lower: 2 }
  };
  return data[fit] || { upper: 0, lower: 0 };
}

  // function showTable() {
  //   const size = document.getElementById('size').value;
  //   const fit = document.getElementById('fit').value;
  //   document.getElementById('refSize').textContent = size;
  //   document.getElementById('refFit').textContent = fit;
  
  //   // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –ì–û–°–¢
  //   const std = {
  //     "–ì–û–°–¢ 25346-89": {
  //       "title": "–ü–æ–ª—è –¥–æ–ø—É—Å–∫–æ–≤ –∏ –ø–æ—Å–∞–¥–∫–∏",
  //       "table": "–¢–∞–±–ª–∏—Ü–∞ 1",
  //       "data": `–ò–Ω—Ç–µ—Ä–≤–∞–ª: 30‚Äì50 –º–º | h7: 0 / -25 –º–∫–º`
  //     }
  //   };
  
  //   document.getElementById('referenceTable').innerHTML = `
  //     <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${std["–ì–û–°–¢ 25346-89"].title}<br>
  //     <strong>${std["–ì–û–°–¢ 25346-89"].table}:</strong><br>
  //     <code>${std["–ì–û–°–¢ 25346-89"].data}</code><br>
  //     <small>–î–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–∞—Å—Å–µ—Ç—ã –∑–Ω–∞–Ω–∏–π</small>
  //   `;
  // }

  function checkReminders() {
    const today = new Date().toISOString().split('T')[0];
    const mockReminders = [
      { text: "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–≤–∞–Ω–æ–≤–∞ ‚Äî –∑–∞–≤—Ç—Ä–∞", urgent: true },
      { text: "–£–ó–ö –¥–ª—è ITEM-001 ‚Äî —Å—Ä–æ–∫ 15.04", urgent: false }
    ];
  
    const list = document.getElementById('reminderList');
    list.innerHTML = mockReminders
      .map(r => `<p style="color:${r.urgent ? 'red' : 'black'}">${r.text}</p>`)
      .join('');
  }

  function addItem() {
    const type = document.getElementById('productType').value;
    const diameter = document.getElementById('diameter')?.value;
    const wall_thickness = document.getElementById('wall_thickness')?.value;
    const pn = document.getElementById('pn')?.value;
    const material = document.getElementById('material').value;
    
    const id = `ITEM-${type.slice(0,3).toUpperCase()}-${diameter || pn}-${Date.now() % 1000}`;
    
    document.getElementById('itemResult').innerHTML = `
      ‚úÖ –°–æ–∑–¥–∞–Ω–æ: <strong>${id}</strong><br>
      –¢–∏–ø: ${type}<br>
      –†–∞–∑–º–µ—Ä: ${diameter ? diameter + 'x' + wall_thickness : pn}<br>
      –ú–∞—Ç–µ—Ä–∏–∞–ª: ${material}<br>
      <a href="#" onclick="showItem('${id}')">–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>
    `;
  }

  async function loadTemplate() {
    const products = await loadKnowledgeData('products.json');
    const type = document.getElementById('productType').value;
    const product = products[type];
    const container = document.getElementById('paramsForm');
    
    let form = '';
    if (product.params.includes('diameter')) {
      form += '–î–∏–∞–º–µ—Ç—Ä, –º–º: <input type="number" id="diameter"><br>';
    }
    if (product.params.includes('wall_thickness')) {
      form += '–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏, –º–º: <input type="number" id="wall_thickness"><br>';
    }
    if (product.params.includes('pn')) {
      form += 'PN: <input type="number" id="pn"><br>';
    }
    if (product.params.includes('face_type')) {
      form += '–¢–∏–ø —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è: <select id="face_type"><option>RF</option><option>FF</option></select><br>';
    }
    form += `–ú–∞—Ç–µ—Ä–∏–∞–ª: <select id="material">
      <option>13–•–§–ê</option>
      <option>09–ì2–°</option>
      <option>12–•18–ù10–¢</option>
    </select><br>`;
    
    container.innerHTML = form;
  }
  
  async function translatePhrase() {
    const translations = await loadKnowledgeData('translations.json');
    const phrase = document.getElementById('phraseSelect').value;
    const eng = translations[phrase];
    
    document.getElementById('translationResult').innerHTML = `
      <strong>RU:</strong> ${phrase}<br>
      <strong>EN:</strong> ${eng}
    `;
  }
  
  async function compareStandards() {
    const comparisons = await loadKnowledgeData('comparison.json');
    const key = document.getElementById('compareSelect').value;
    const data = comparisons[key];
  
    let html = `<strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${key.replace('_', ' ‚Üí ')}</strong><br>`;
    for (const [param, values] of Object.entries(data)) {
      html += `<br><em>${param}:</em><br>`;
      for (const [std, value] of Object.entries(values)) {
        if (std !== "conclusion") html += `${std}: ${value}<br>`;
      }
      html += `<strong>–í—ã–≤–æ–¥:</strong> ${values.conclusion}<br>`;
    }
  
    document.getElementById('comparisonResult').innerHTML = html;
  }

  function toggleSidebar() {
    document.getElementById('sidebar').classList.toggle('open');
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
async function loadPageScripts(pageId) {
  if (pageId === 'page-analytics') {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º Chart.js –ø–µ—Ä–µ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    return new Promise((resolve, reject) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ Chart.js
      if (typeof Chart !== 'undefined') {
        resolve();
        return;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º Chart.js
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }
}

  async function showPage(pageId) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
    document.getElementById('sidebar').classList.remove('open');

     // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  try {
    await loadPageScripts(pageId);
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
  }
    
    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º
    const existingPage = document.getElementById(pageId);
    if (existingPage) {
      existingPage.classList.add('active');
      
      // ‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      setTimeout(() => {
        switch(pageId) {
          case 'page-inspection':
            if (typeof loadItemsForInspection === 'function') {
              loadItemsForInspection();
              showRecentInspections();
            }
            break;
          case 'page-ncr':
            if (typeof loadItemsForNCR === 'function') {
              loadItemsForNCR();
              showRecentNCRs();
            }
            break;
          case 'page-statistics':
            if (typeof loadStatistics === 'function') {
              loadStatistics();
            }
            break;
          case 'page-reminders':
            if (typeof loadReminders === 'function') {
              loadReminders();
            }
            break;
                  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–∞–Ω–∏–π
      case 'page-company':
        if (typeof loadCompaniesList === 'function' && typeof loadCompaniesForStats === 'function') {
          loadCompaniesList();
          loadCompaniesForStats();
        }
        break;
          // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
          case 'page-analytics':
            if (typeof loadAnalytics === 'function') {
              loadAnalytics();
            }
            break;
            case 'page-control-params':
  if (typeof initializeControlParamsPage === 'function') {
    initializeControlParamsPage();
  }
  break;
        }
      }, 100);
      
      return;
    }
  
    // –ö–∞—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    const pageFiles = {
      'page-inspector-profile': 'pages/page-inspector-profile.html',
      'page-skill-tree': 'pages/page-skill-tree.html',
      'page-analytics': 'pages/page-analytics.html',
      'page-add-item': 'pages/page-add-item.html',
      // 'page-materials': 'pages/page-materials.html',
      'page-inspection': 'pages/page-inspection.html',
      'page-ncr': 'pages/page-ncr.html',
      'page-company': 'pages/page-company.html',
      'page-checklist': 'pages/page-checklist.html',
      'page-standards': 'pages/page-standards.html',
      'page-compare': 'pages/page-compare.html',
      'page-reminders': 'pages/page-reminders.html',
      'page-translate': 'pages/page-translate.html',
      'page-tolerance': 'pages/page-tolerance.html',
      'page-statistics': 'pages/page-statistics.html',
      'page-help': 'pages/page-help.html',
      'page-smart': 'pages/page-smart.html',
      'page-mailer': 'pages/page-mailer.html',
      'page-control-params': 'pages/page-control-params.html',
    };
  
    const url = pageFiles[pageId];
    if (!url) {
      console.error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', pageId);
      return;
    }
  
    try {
      const response = await fetch(url);
      const html = await response.text();
  
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const newPage = document.createElement('div');
      newPage.id = pageId;
      newPage.className = 'page';
      newPage.innerHTML = html;
  
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
      document.getElementById('mainContent').appendChild(newPage);
  
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
      newPage.classList.add('active');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º JS –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
const jsFile = url.replace('.html', '.js') + '?v=' + Date.now();
if (jsFile !== url) {
  const script = document.createElement('script');
  script.src = jsFile;
  document.head.appendChild(script);
}
      // // –ó–∞–≥—Ä—É–∂–∞–µ–º JS –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      // const jsFile = url.replace('.html', '.js');
      // if (jsFile !== url) {
      //   const script = document.createElement('script');
      //   script.src = jsFile;
      //   document.head.appendChild(script);
      // }
      
      // ‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      setTimeout(() => {
        switch(pageId) {
          case 'page-inspection':
            if (typeof loadItemsForInspection === 'function') {
              loadItemsForInspection();
              showRecentInspections();
            }
            break;
          case 'page-ncr':
            if (typeof loadItemsForNCR === 'function') {
              loadItemsForNCR();
              showRecentNCRs();
            }
            break;
          case 'page-statistics':
            if (typeof loadStatistics === 'function') {
              loadStatistics();
            }
            break;
          case 'page-reminders':
            if (typeof loadReminders === 'function') {
              loadReminders();
            }
            break;
                // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    case 'page-company':
      if (typeof loadCompaniesList === 'function' && typeof loadCompaniesForStats === 'function') {
        loadCompaniesList();
        loadCompaniesForStats();
      }
      break;
          // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
          case 'page-analytics':
            if (typeof loadAnalytics === 'function') {
              loadAnalytics();
            }
            break;
        }
      }, 100);
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    }
  }
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
async function loadCompaniesList() {
  try {
    const db = window.db;
    const snapshot = await db.collection('companies')
      .orderBy('createdAt', 'desc')
      .get();

    let html = '';
    snapshot.forEach(doc => {
      const company = doc.data();
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ standards
      let standardsDisplay = '‚Äî';
      try {
        if (company.standards && Array.isArray(company.standards) && company.standards.length > 0) {
          standardsDisplay = company.standards.join(', ');
        }
      } catch (e) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ standards –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏:', company.name, e);
        standardsDisplay = '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö';
      }
      
      html += `
        <div class="company-card">
          <strong>${company.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</strong><br>
          ID: ${company.id || '‚Äî'}<br>
          –ö–æ–Ω—Ç–∞–∫—Ç: ${company.contact || '‚Äî'}<br>
          –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã: ${standardsDisplay}
        </div>
        <hr>
      `;
    });

    document.getElementById('companiesList').innerHTML = html || '–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç';

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π:', error);
    document.getElementById('companiesList').innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π';
  }
}
// // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
// async function loadCompaniesList() {
//   try {
//     const db = window.db;
//     const snapshot = await db.collection('companies')
//       .orderBy('createdAt', 'desc')
//       .get();

//     let html = '';
//     snapshot.forEach(doc => {
//       const company = doc.data();
      
//       // ‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø standards
//       let standardsText = '‚Äî';
//       if (company.standards && Array.isArray(company.standards) && company.standards.length > 0) {
//         standardsText = company.standards.join(', ');
//       }
      
//       // ‚úÖ –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
//       const contactText = company.contact || '‚Äî';
      
//       html += `
//         <div class="company-card">
//           <strong>${company.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</strong><br>
//           ID: ${company.id || '‚Äî'}<br>
//           –ö–æ–Ω—Ç–∞–∫—Ç: ${contactText}<br>
//           –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã: ${standardsText}
//         </div>
//         <hr>
//       `;
//     });

//     document.getElementById('companiesList').innerHTML = html || '–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç';

//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π:', error);
//     document.getElementById('companiesList').innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π';
//   }
// }

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadCompaniesForStats() {
  try {
    const db = window.db;
    const snapshot = await db.collection('companies')
      .orderBy('name')
      .get();

    const select = document.getElementById('companyForStats');
    select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ --</option>';

    snapshot.forEach(doc => {
      const company = doc.data();
      const option = document.createElement('option');
      option.value = company.id || '';
      option.textContent = company.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      select.appendChild(option);
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}
  

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø—É—Å–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    showPage('page-tolerance');
  });

  // üîí –ó–∞—â–∏—Ç–∞: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ JSZip –¥–æ—Å—Ç—É–ø–µ–Ω
// üîí –ó–∞—â–∏—Ç–∞: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ JSZip –¥–æ—Å—Ç—É–ø–µ–Ω
const knowledgePackInput = document.getElementById('knowledgePack');
if (knowledgePackInput && typeof JSZip !== 'undefined') {

    knowledgePackInput.addEventListener('change', async function(e) {
        const file = e.target.files[0];
        
        // ‚ùå –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if (!file) {
            console.warn('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.');
            return;
        }

        // ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –∏–º–µ–Ω–Ω–æ ZIP?
        if (file.type !== 'application/zip' && !file.name.endsWith('.zip')) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ (.zip).');
            this.value = ''; // –û—á–∏—Å—Ç–∏—Ç—å input
            return;
        }

        try {
            alert('–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–∞—Å—Å–µ—Ç—ã...');

            const zip = new JSZip();
            const content = await zip.loadAsync(file);

            let filesCount = 0;
            const processedFiles = [];

            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –∞—Ä—Ö–∏–≤–µ
            for (const [filename, zipEntry] of Object.entries(content.files)) {
                if (zipEntry.dir) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–µ–π
                const cleanFilename = filename.split('/').pop();

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞
                if (!cleanFilename) continue;

                const text = await zipEntry.async('text');

                // üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –µ—Å—Ç—å ‚Äî –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
                localStorage.setItem(`knowledge_${cleanFilename}`, text);
                processedFiles.push(cleanFilename);
                filesCount++;
                console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${cleanFilename}`);
            }

            // –†–µ–∑—É–ª—å—Ç–∞—Ç
            if (filesCount > 0) {
                localStorage.setItem('knowledgePack_loaded', 'true');
                localStorage.setItem('knowledgePack_name', file.name);

                alert(`üéâ –ö–∞—Å—Å–µ—Ç–∞ "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filesCount}\n\n–§–∞–π–ª—ã: ${processedFiles.join(', ')}`);
            } else {
                alert('‚ö†Ô∏è –í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.');
            }

            // –û—á–∏—Å—Ç–∫–∞ input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
            this.value = '';

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –∞—Ä—Ö–∏–≤–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ZIP –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.');
        }
    });

} else {
    // üí° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ‚Äî –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ JSZip –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!knowledgePackInput) {
        console.warn('–≠–ª–µ–º–µ–Ω—Ç #knowledgePack –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Å–µ—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
    }
    if (typeof JSZip === 'undefined') {
        console.error('JSZip –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script> –≤ <head>.');
    }
}




async function testFirebase() {
  try {
    const db = window.db;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const docRef = await db.collection('test').add({
      message: 'Firebase —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      timestamp: new Date()
    });
    
    console.log('‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID:', docRef.id);
    
    // –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ
    const doc = await db.collection('test').doc(docRef.id).get();
    if (doc.exists) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', doc.data());
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await db.collection('test').doc(docRef.id).delete();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Firebase:', error);
  }
}

// –í—ã–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  if (window.db) {
    console.log('Firebase SDK –∑–∞–≥—Ä—É–∂–µ–Ω');
    // testFirebase(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è —Ç–µ—Å—Ç–∞
  } else {
    console.log('Firebase –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω');
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —ç–º–æ—Ü–∏–∏
let selectedEmoji = 'üë®‚Äçüíº';
let feedbackType = 'inspector'; // 'inspector' –∏–ª–∏ 'developer'

// –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏
function selectEmoji(emoji) {
  selectedEmoji = emoji;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ —É–≥–ª—É textarea
  document.getElementById('emoji-corner').textContent = emoji;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
  document.querySelectorAll('.emoji-option').forEach(option => {
    option.classList.remove('selected');
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
  event?.target?.classList?.add('selected');
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–¥–±—ç–∫–∞
  if (emoji === 'üë®‚Äçüíº') {
    feedbackType = 'inspector';
  } else if (emoji === 'üë®‚Äçüíª') {
    feedbackType = 'developer';
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const textarea = document.getElementById('developer-feedback');
  if (feedbackType === 'inspector') {
    textarea.placeholder = "–æ—Ç –∏–Ω—Å—Ç–ø–µ–∫—Ç–æ—Ä–∞...";
  } else {
    textarea.placeholder = "–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...";
  }
}
// // –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏
// function selectEmoji(emoji) {
//   selectedEmoji = emoji;
  
//   // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏
//   document.getElementById('emoji-display').textContent = emoji;
  
//   // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
//   document.querySelectorAll('.emoji-option').forEach(option => {
//     option.classList.remove('selected');
//   });
  
//   // –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
//   event?.target?.classList?.add('selected');
  
//   // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–¥–±—ç–∫–∞
//   if (emoji === 'üë®‚Äçüíº') {
//     feedbackType = 'inspector';
//   } else if (emoji === 'üë®‚Äçüíª') {
//     feedbackType = 'developer';
//   }
  
//   // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
//   const textarea = document.getElementById('developer-feedback');
//   if (feedbackType === 'inspector') {
//     textarea.placeholder = "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∑–∞–º–µ—á–∞–Ω–∏—è, –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...";
//   } else {
//     textarea.placeholder = "–°–æ–æ–±—â–∏—Ç–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, –±–∞–≥–∞—Ö, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ...";
//   }
// }

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function openDeveloperModal() {
  document.getElementById('developer-modal').style.display = 'block';
  loadDeveloperNotifications();
  loadFeedbackHistory();
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —ç–º–æ—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  selectEmoji('üë®‚Äçüíº');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeDeveloperModal() {
  document.getElementById('developer-modal').style.display = 'none';
}

// –ó–∞–∫—Ä—ã—Ç—å –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
window.onclick = function(event) {
  const modal = document.getElementById('developer-modal');
  if (event.target == modal) {
    modal.style.display = 'none';
  }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
async function submitDeveloperFeedback() {
  const feedbackText = document.getElementById('developer-feedback').value.trim();
  
  if (!feedbackText) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
    return;
  }
  
  try {
    const db = window.db;
    if (!db) {
      throw new Error('Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    const fullMessage = `${selectedEmoji} ${feedbackText}`;
    
    if (feedbackType === 'inspector') {
      // –û–±—ã—á–Ω—ã–π —Ñ–∏–¥–±—ç–∫ –≤ /feedback/
      await db.collection('feedback').add({
        message: fullMessage,
        emoji: selectedEmoji,
        type: 'inspector',
        author: localStorage.getItem('inspector_name') || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä',
        timestamp: new Date(),
        status: 'new'
      });
      
      alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±—ç–∫!');
      
    } else {
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ /notifications/
      await db.collection('notifications').add({
        text: fullMessage,
        emoji: selectedEmoji,
        type: 'technical',
        author: localStorage.getItem('inspector_name') || '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä',
        date: new Date(),
        priority: 'medium'
      });
      
      alert('‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!');
    }
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById('developer-feedback').value = '';
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —ç–º–æ—Ü–∏—é
    selectEmoji('üë®‚Äçüíº');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    loadFeedbackHistory();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async function loadDeveloperNotifications() {
  try {
    const db = window.db;
    if (!db) return;
    
    const snapshot = await db.collection('notifications')
      .orderBy('date', 'desc')
      .limit(3)
      .get();
    
    const notificationsContainer = document.getElementById('dev-notifications');
    
    if (snapshot.empty) {
      notificationsContainer.innerHTML = '<p>üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
      return;
    }
    
    let html = '<h3>üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</h3>';
    snapshot.forEach(doc => {
      const notif = doc.data();
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
      const displayText = notif.emoji ? `${notif.emoji} ${notif.text.replace(notif.emoji + ' ', '')}` : notif.text;
      html += `<p>‚Ä¢ ${displayText}</p>`;
    });
    
    notificationsContainer.innerHTML = html;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    document.getElementById('dev-notifications').innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>';
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
async function loadFeedbackHistory() {
  try {
    const db = window.db;
    if (!db) return;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ñ–∏–¥–±—ç–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const feedbackSnapshot = await db.collection('feedback')
      .orderBy('timestamp', 'desc')
      .limit(10)
      .get();
    
    const historyContainer = document.getElementById('feedback-list');
    
    if (feedbackSnapshot.empty) {
      historyContainer.innerHTML = '<p>üì≠ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞</p>';
      return;
    }
    
    let html = '';
    feedbackSnapshot.forEach(doc => {
      const feedback = doc.data();
      const date = new Date(feedback.timestamp.toDate ? feedback.timestamp.toDate() : feedback.timestamp);
      const formattedDate = date.toLocaleString('ru-RU');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
      const displayText = feedback.emoji ? feedback.message.replace(feedback.emoji + ' ', '') : feedback.message;
      const displayEmoji = feedback.emoji || 'üìù';
      
      html += `
        <div class="feedback-item">
          <div class="feedback-date">${displayEmoji} ${formattedDate}</div>
          <div class="feedback-text">${displayText}</div>
          <div class="feedback-status status-${feedback.status}">
            –°—Ç–∞—Ç—É—Å: ${getStatusText(feedback.status)}
          </div>
        </div>
      `;
    });
    
    historyContainer.innerHTML = html;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    document.getElementById('feedback-list').innerHTML = '<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</p>';
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
  const statuses = {
    'new': '–ù–æ–≤–æ–µ',
    'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
    'done': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
  };
  return statuses[status] || status;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (document.getElementById('dev-notifications')) {
    loadDeveloperNotifications();
  }
});


  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
  document.addEventListener('DOMContentLoaded', function() {
    const savedKey = localStorage.getItem('openrouter_api_key');
    if (savedKey) {
      document.getElementById('apiKey').value = savedKey;
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
function saveToStorage(key, value) {
  localStorage.setItem(key, value);
}

// –ü—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
function getFromStorage(key) {
  return localStorage.getItem(key);
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function clearControlData() {
  localStorage.removeItem('selectedItem');
  localStorage.removeItem('selectedGost');
  localStorage.removeItem('selectedControl');
}

function goToPage(page) {
  // –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∏–º –ø—É—Ç—å: /pages/–∏–º—è_—Ñ–∞–π–ª–∞.html
  window.location.href = `/pages/${page}.html`;
}
// function goToPage(page) {
//   window.location.href = `pages/${page}.html`;
// }
// // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
// function goToPage(page) {
//   // –ï—Å–ª–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'pages/', –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
//   const path = page.startsWith('pages/') ? page : `pages/${page}`;
//   window.location.href = `${path}.html`;
// }

// –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
function goBack() {
  window.history.back();
}

// –û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
function markAsCompleted() {
  const item = getFromStorage('selectedItem');
  const gost = getFromStorage('selectedGost');
  const control = getFromStorage('selectedControl');
  const progressKey = `${item}-${gost}`;

  if (!item || !gost || !control) {
      alert("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.");
      return;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  let progress = JSON.parse(localStorage.getItem('controlProgress') || '{}');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (!progress[progressKey]) {
      progress[progressKey] = {};
  }

  // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
  progress[progressKey][control] = true;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º
  localStorage.setItem('controlProgress', JSON.stringify(progress));

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å, –Ω–æ –º—ã –æ–±–Ω–æ–≤–∏–º –≤—Ä—É—á–Ω—É—é)
  alert(`‚úÖ –≠—Ç–∞–ø "${getControlLabel(control)}" –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!`);

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ‚Äî —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±)
  location.reload();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –ø–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
function getControlLabel(type) {
  const labels = {
      'vik': '–í–ò–ö',
      'uzk': '–£–ó–ö',
      'rgk': '–†–ì–ö',
      'gi': '–ì–ò',
      'input': '–í—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å',
      'weld': '–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞'
  };
  return labels[type] || type;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å ‚Üí PDF
function printResult() {
  const item = getFromStorage('selectedItem');
  const gost = getFromStorage('selectedGost');
  const control = getFromStorage('selectedControl');

  const itemLabel = {
      'bearing': '–ü–æ–¥—à–∏–ø–Ω–∏–∫ —Å–∫–æ–ª—å–∂–µ–Ω–∏—è –æ–ø–æ—Ä–Ω–æ-—É–ø–æ—Ä–Ω—ã–π',
      'flange': '–§–ª–∞–Ω–µ—Ü —Å—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–∏–π –ø—Ä–∏–≤–∞—Ä–Ω–æ–π',
      'bushing': '–í—Ç—É–ª–∫–∞ –±—Ä–æ–Ω–∑–æ–≤–∞—è',
      'seal': '–°–∞–ª—å–Ω–∏–∫ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π'
  }[item] || item;

  const gostLabel = {
      'gost-12820': '–ì–û–°–¢ 12820-80',
      'asme-b165': 'ASME B16.5',
      'en-1092': 'EN 1092-1',
      'api-6a': 'API 6A',
      'tu-3624': '–¢–£ 36.24.51-2023',
      'gost-iso-4378': '–ì–û–°–¢ –ò–°–û 4378-1-2001',
      'gost-8338': '–ì–û–°–¢ 8338-75',
      'gost-22261': '–ì–û–°–¢ 22261-2021'
  }[gost] || gost;

  const controlLabel = {
      'vik': '–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å (–í–ò–ö)',
      'uzk': '–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å (–£–ó–ö)',
      'rgk': '–†–∞–¥–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å (–†–ì–ö)',
      'gi': '–ì–∏–¥—Ä–æ–∏—Å–ø—ã—Ç–∞–Ω–∏–µ (–ì–ò)',
      'input': '–í—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å',
      'weld': '–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞'
  }[control] || control;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  const header = `
      <h2>–ß–µ–∫-–ª–∏—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è</h2>
      <p><strong>–ò–∑–¥–µ–ª–∏–µ:</strong> ${itemLabel}</p>
      <p><strong>–ù–æ—Ä–º–∞—Ç–∏–≤–∫–∞:</strong> ${gostLabel}</p>
      <p><strong>–¢–∏–ø –∫–æ–Ω—Ç—Ä–æ–ª—è:</strong> ${controlLabel}</p>
      <hr>
  `;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  const body = document.body.innerHTML;

  // –ü–æ–¥–º–µ–Ω—è–µ–º
  document.body.innerHTML = header + document.querySelector('.params-table').outerHTML;

  // –ü–µ—á–∞—Ç—å
  window.print();

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
  document.body.innerHTML = body;
  location.reload(); // —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ —Å–Ω–æ–≤–∞
}


// ============ –§–£–ù–ö–¶–ò–ò LUMIS ‚Äî –ü–ï–†–ï–ù–ï–°–ï–ù–´ –í –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ ============

function runQuery() {
  console.log("üî• runQuery –≤—ã–∑–≤–∞–Ω");

  const itemSelect = document.getElementById('itemSelect');
  const normativeSelect = document.getElementById('normativeSelect');
  const controlTypeSelect = document.getElementById('controlTypeSelect');
  const outputDiv = document.getElementById('output');

  if (!itemSelect || !normativeSelect || !controlTypeSelect || !outputDiv) {
    console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
    return;
  }

  const itemKey = itemSelect.value;
  const normative = normativeSelect.value;
  const controlType = controlTypeSelect.value;

  if (!itemKey || !normative || !controlType) {
    outputDiv.innerHTML = `<div style="color: #e74c3c;">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ, –Ω–æ—Ä–º–∞—Ç–∏–≤–∫—É –∏ —Ç–∏–ø –∫–æ–Ω—Ç—Ä–æ–ª—è.</div>`;
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LumisInstance –∑–∞–≥—Ä—É–∂–µ–Ω
  if (!window.LumisInstance || !window.LumisInstance.db) {
    outputDiv.innerHTML = `<div style="color: #e74c3c;">‚ùå LumisInstance –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞.</div>`;
    return;
  }

  const alias = LumisInstance.aliases?.[itemKey] || itemKey;
  const item = LumisInstance.db[alias];

  if (!item) {
    outputDiv.innerHTML = `<div style="color: #e74c3c;">–ò–∑–¥–µ–ª–∏–µ "${itemKey}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</div>`;
    return;
  }

  const instructions = LumisInstance.generateInstructions?.(item, normative, controlType) || [];
  if (instructions.length === 0) {
    outputDiv.innerHTML = `<div style="color: #e74c3c;">–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.</div>`;
    return;
  }

  const checklistHTML = LumisInstance.generateChecklist?.(instructions, item, normative) || '<div>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</div>';
  outputDiv.innerHTML = checklistHTML;

  // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ì–û–°–¢–æ–≤
  if (typeof LumisInstance.visualizeGOSTs === 'function') {
    LumisInstance.visualizeGOSTs(itemKey);
  }

  // WebGL –ø–æ–¥–ø–∏—Å—å
  const activeGroups = [...new Set(instructions.map(instr => instr.index))];
  const signatureCanvas = LumisInstance.generateWebGLColorSignature?.(activeGroups);

  const checklistDiv = outputDiv.querySelector('.checklist');
  if (checklistDiv && signatureCanvas) {
    const container = document.createElement('div');
    container.className = 'webgl-container';
    container.appendChild(signatureCanvas);
    checklistDiv.appendChild(container);
    window.currentSignatureCanvas = signatureCanvas;
  }

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  setTimeout(() => {
    const total = instructions.length;
    const checkedCount = document.querySelectorAll('.checkbox:checked').length;
    const progressPercent = (checkedCount / total) * 100;
    const progressBar = document.querySelector('.progress-fill');
    if (progressBar) {
      progressBar.style.width = `${progressPercent}%`;
    }
  }, 100);
}

function toggleStep(stepId) {
  const content = document.getElementById(`step-content-${stepId}`);
  if (content) {
    content.classList.toggle('active');
  }
}

function speakInstruction(stepNumber, description = "") {
  const text = `–®–∞–≥ ${stepNumber}: ${description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`;
  if ('speechSynthesis' in window) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    utterance.rate = 0.9;
    speechSynthesis.speak(utterance);
  } else {
    alert("üîä " + text);
  }
}

function toggleCheckbox(index, total) {
  const checkbox = document.getElementById(`checkbox-${index}`);
  if (!checkbox) return;

  checkbox.checked = !checkbox.checked;

  const checkedCount = document.querySelectorAll('.checkbox:checked').length;
  const progressPercent = (checkedCount / total) * 100;

  const progressBar = checkbox.closest('.checklist')?.querySelector('.progress-fill');
  if (progressBar) {
    progressBar.style.width = `${progressPercent}%`;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è WebGL
  const activeGroups = [];
  document.querySelectorAll('.checkbox:checked').forEach(cb => {
    const paramRow = cb.closest('.param-row');
    const text = paramRow?.querySelector('strong')?.innerText;
    const match = text?.match?.(/\[([GPEFSJQ])\]/);
    if (match && match[1]) {
      activeGroups.push(match[1]);
    }
  });

  if (window.currentSignatureCanvas?.updateActivations) {
    window.currentSignatureCanvas.updateActivations([...new Set(activeGroups)]);
  }
}

  
