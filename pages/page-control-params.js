// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
const styleLink = document.getElementById('page-control-params-css');
if (styleLink && styleLink.disabled) {
  styleLink.disabled = false;
}
// if (window.LumisInstance && typeof LumisInstance.loadItems === 'function') {
//     LumisInstance.loadItems(); // –∏–ª–∏ LumisInstance.init(), –∫–∞–∫ —É —Ç–µ–±—è
//     document.getElementById('itemSelect').disabled = false;
//     document.getElementById('normativeSelect').disabled = false;
//     document.getElementById('controlTypeSelect').disabled = false;
//     document.getElementById('status').innerText = '‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ';
//   } else {
//     console.error('‚ùå LumisInstance.loadItems –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
//   }

let isInitializing = false;

async function initializeControlParamsPage() {
  if (isInitializing) return;
  isInitializing = true;

  const statusEl = document.getElementById('status');
  if (!statusEl) return;

  try {
    statusEl.innerText = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...';

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–ª–∞—Å—Å Lumis –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof window.Lumis === 'undefined') {
      await loadScript('../Lumis.js'); // ‚Üê –ü—É—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ 'Lumis.js', –µ—Å–ª–∏ index.html –≤ –∫–æ—Ä–Ω–µ
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –∏–∑ –∫–æ—Ä–Ω—è ‚Äî –ø—É—Ç—å '../OmniS.mini.json' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 'OmniS.mini.json'
    // const response = await fetch('../OmniS.mini.json'); // ‚Üê –í–ê–ñ–ù–û: –ø—É—Ç—å –∫ JSON
    // if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å OmniS.mini.json');
    // const jsonData = await response.json();
    const jsonData = await loadKnowledgeData('OmniS.mini.json');
    // –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
    window.LumisInstance = new Lumis(jsonData);
    console.log("‚ú® –õ—é–º–∏—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –°–≤–µ—Ç ‚Äî —Å –Ω–∞–º–∏.");

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    statusEl.innerText = "‚úÖ –ì–æ—Ç–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ, –Ω–æ—Ä–º–∞—Ç–∏–≤–∫—É –∏ —Ç–∏–ø –∫–æ–Ω—Ç—Ä–æ–ª—è.";
    document.getElementById('normativeSelect')?.removeAttribute('disabled');
    document.getElementById('controlTypeSelect')?.removeAttribute('disabled');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç –∏–∑–¥–µ–ª–∏–π
    const itemSelect = document.getElementById('itemSelect');
    if (itemSelect) {
      itemSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ...</option>';
      Object.entries(LumisInstance.aliases).forEach(([alias, key]) => {
        const item = LumisInstance.db[key];
        if (item) {
          const option = document.createElement('option');
          option.value = alias;
          option.innerText = `${item.name} (${alias})`;
          itemSelect.appendChild(option);
        }
      });
      itemSelect.disabled = false;
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –ì–û–°–¢—ã
    LumisInstance.visualizeGOSTs(null);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    document.getElementById('normativeSelect').value = '–ì–û–°–¢';

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Lumis:', error);
    statusEl.innerText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
  } finally {
    isInitializing = false;
  }

  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
const itemSelect = document.getElementById('itemSelect');
const normativeSelect = document.getElementById('normativeSelect');
const controlTypeSelect = document.getElementById('controlTypeSelect');
const runButton = document.querySelector('button[onclick="runQuery()"]');

function updateButtonState() {
  if (
    itemSelect.value &&
    normativeSelect.value &&
    controlTypeSelect.value
  ) {
    runButton.disabled = false;
  } else {
    runButton.disabled = true;
  }
}

itemSelect.addEventListener('change', updateButtonState);
normativeSelect.addEventListener('change', updateButtonState);
controlTypeSelect.addEventListener('change', updateButtonState);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
updateButtonState();

}

function loadScript(src) {
  return new Promise((resolve, reject) => {
    if (document.querySelector(`script[src="${src}"]`)) {
      resolve();
      return;
    }
    const script = document.createElement('script');
    script.src = src;
    script.onload = resolve;
    script.onerror = () => reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç: ${src}`));
    document.head.appendChild(script);
  });
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeControlParamsPage);
} else {
  initializeControlParamsPage();
}

// --- –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ---

function runQuery() {
  console.log("üî• runQuery –≤—ã–∑–≤–∞–Ω. itemKey =", document.getElementById('itemSelect').value);
  const itemKey = document.getElementById('itemSelect').value;
  const normative = document.getElementById('normativeSelect').value;
  const controlType = document.getElementById('controlTypeSelect').value;

  if (!itemKey || !normative || !controlType) {
    document.getElementById('output').innerHTML = `<div style="color: #e74c3c;">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ, –Ω–æ—Ä–º–∞—Ç–∏–≤–∫—É –∏ —Ç–∏–ø –∫–æ–Ω—Ç—Ä–æ–ª—è.</div>`;
    return;
  }

  const item = LumisInstance.db[LumisInstance.aliases[itemKey] || itemKey];
  if (!item) {
    document.getElementById('output').innerHTML = `<div style="color: #e74c3c;">–ò–∑–¥–µ–ª–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</div>`;
    return;
  }

  const instructions = LumisInstance.generateInstructions(item, normative, controlType);
  if (instructions.length === 0) {
    document.getElementById('output').innerHTML = `<div style="color: #e74c3c;">–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.</div>`;
    return;
  }

  const checklistHTML = LumisInstance.generateChecklist(instructions, item, normative);
  document.getElementById('output').innerHTML = checklistHTML;

  const activeGroups = [...new Set(instructions.map(instr => instr.index))];
  const signatureCanvas = LumisInstance.generateWebGLColorSignature([]);

  const checklistDiv = document.querySelector('.checklist');
  if (checklistDiv) {
    const container = document.createElement('div');
    container.className = 'webgl-container';
    container.appendChild(signatureCanvas);
    checklistDiv.appendChild(container);
    window.currentSignatureCanvas = signatureCanvas;
  }

  requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      const total = instructions.length;
      const checkedCount = document.querySelectorAll('.checkbox:checked').length;
      const progressPercent = (checkedCount / total) * 100;
      const progressBar = document.querySelector('.progress-fill');
      if (progressBar) progressBar.style.width = `${progressPercent}%`;
    });
  });

  LumisInstance.visualizeGOSTs(itemKey);
}

function toggleStep(stepId) {
  const content = document.getElementById(`step-content-${stepId}`);
  content.classList.toggle('active');
}
function speakInstruction(stepNumber, description = "") {
  const text = `–®–∞–≥ ${stepNumber}: ${description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`;

  if ('speechSynthesis' in window) {
    // –ñ–¥—ë–º, –ø–æ–∫–∞ –≥–æ–ª–æ—Å–∞ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è
    if (speechSynthesis.getVoices().length === 0) {
      speechSynthesis.addEventListener('voiceschanged', () => {
        _speak(text);
      });
    } else {
      _speak(text);
    }
  } else {
    alert("üîä " + text);
  }

  function _speak(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    utterance.rate = 1.5; // —á—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ ‚Äî 0.9 ‚Üí 1.1
    utterance.pitch = 0.3; // –ø–æ–≤—ã—Å–∏–º —Ç–æ–Ω ‚Äî –∑–≤—É—á–∏—Ç "–≤–µ—Å–µ–ª–µ–µ"

    // –ò—â–µ–º –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const voices = speechSynthesis.getVoices();
    const femaleVoice = voices.find(voice =>
      voice.lang.includes('ru') &&
      (voice.name.includes('Anna') || // Anna (Microsoft)
       voice.name.includes('–ê–Ω–Ω–∞') ||
       voice.name.includes('Tatiana') || // Tatiana (Yandex)
       voice.name.includes('–¢–∞—Ç—å—è–Ω–∞') ||
       voice.name.includes('female') ||
       voice.name.includes('–ñ–µ–Ω—Å–∫–∏–π'))
    );

    if (femaleVoice) {
      utterance.voice = femaleVoice;
    } else {
      // –ï—Å–ª–∏ –∂–µ–Ω—Å–∫–æ–≥–æ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä—É—Å—Å–∫–∏–π
      const ruVoice = voices.find(v => v.lang.includes('ru'));
      if (ruVoice) utterance.voice = ruVoice;
    }

    speechSynthesis.speak(utterance);
  }
}

// function speakInstruction(stepNumber, description = "") {
//   const text = `–®–∞–≥ ${stepNumber}: ${description || "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}`;
//   if ('speechSynthesis' in window) {
//     const utterance = new SpeechSynthesisUtterance(text);
//     utterance.lang = 'ru-RU';
//     utterance.rate = 0.9;
//     speechSynthesis.speak(utterance);
//   } else {
//     alert("üîä " + text);
//   }
// }

function toggleCheckbox(index, total) {
  const checkbox = document.getElementById(`checkbox-${index}`);
  checkbox.checked = !checkbox.checked;

  const checkedCount = document.querySelectorAll('.checkbox:checked').length;
  const progressPercent = (checkedCount / total) * 100;

  const progressBar = checkbox.closest('.checklist')?.querySelector('.progress-fill');
  if (progressBar) {
    progressBar.style.width = `${progressPercent}%`;
  }

  const activeGroups = [];
  document.querySelectorAll('.checkbox:checked').forEach(cb => {
    const paramRow = cb.closest('.param-row');
    const text = paramRow.querySelector('strong').innerText;
    const match = text.match(/\[([GPEFSJQ])\]/);
    if (match && match[1]) {
      activeGroups.push(match[1]);
    }
  });

  if (window.currentSignatureCanvas?.updateActivations) {
    window.currentSignatureCanvas.updateActivations([...new Set(activeGroups)]);
  }
}

function handlePhotoUpload(input, itemId) {
  const previewContainer = document.getElementById(`photo-preview-${itemId}`);
  previewContainer.innerHTML = ''; // –æ—á–∏—â–∞–µ–º, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–æ–ª—å–∫–æ 1 —Ñ–æ—Ç–æ ‚Äî –∏–ª–∏ –æ—Å—Ç–∞–≤—å, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ

  if (!input.files || input.files.length === 0) return;

  Array.from(input.files).forEach(file => {
    if (!file.type.startsWith('image/')) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const img = document.createElement('img');
      img.src = e.target.result;
      img.style.width = '100px';
      img.style.height = '100px';
      img.style.objectFit = 'cover';
      img.style.borderRadius = '8px';
      img.style.boxShadow = '0 2px 6px rgba(0,0,0,0.1)';

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
      const wrapper = document.createElement('div');
      wrapper.style.position = 'relative';
      wrapper.appendChild(img);

      const removeBtn = document.createElement('button');
      removeBtn.innerText = '√ó';
      removeBtn.style.position = 'absolute';
      removeBtn.style.top = '2px';
      removeBtn.style.right = '2px';
      removeBtn.style.background = '#e74c3c';
      removeBtn.style.color = 'white';
      removeBtn.style.border = 'none';
      removeBtn.style.borderRadius = '50%';
      removeBtn.style.width = '20px';
      removeBtn.style.height = '20px';
      removeBtn.style.fontSize = '12px';
      removeBtn.style.cursor = 'pointer';
      removeBtn.onclick = () => {
        wrapper.remove();
        // –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å input, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        input.value = '';
      };

      wrapper.appendChild(removeBtn);
      previewContainer.appendChild(wrapper);
    };
    reader.readAsDataURL(file);
  });
}
