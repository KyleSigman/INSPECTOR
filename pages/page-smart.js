// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
function runSmartCommand() {
    const input = document.getElementById('smartCommand').value.trim();
    const resultDiv = document.getElementById('smartResult');
    const contentDiv = document.getElementById('resultContent');
  
    if (!input || !input.startsWith('/')) {
      contentDiv.innerHTML = '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å /';
      resultDiv.style.display = 'block';
      return;
    }
  
    const [command, ...args] = input.slice(1).trim().split(' ');
    const argsStr = args.join(' ');
  
    try {
        switch (command.toLowerCase()) {
            case 'get_item':
              getItem(argsStr);
              break;
            case 'get_company':
              getCompany(argsStr);
              break;
            case 'get_ncr':
              getNCR(argsStr);
              break;
            case 'get_inspection':
              getInspection(argsStr);
              break;
            case 'show_tolerances':
              showTolerances(argsStr);
              break;
            default:
              contentDiv.innerHTML = `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /${command}`;
              resultDiv.style.display = 'block';
          }
    //   switch (command.toLowerCase()) {
    //     case 'get_item':
    //       getItem(argsStr);
    //       break;
    //     case 'get_company':
    //       getCompany(argsStr);
    //       break;
    //     case 'show_tolerances':
    //       showTolerances(argsStr);
    //       break;
    //     case 'find_items':
    //       findItems(argsStr);
    //       break;
    //     case 'stats':
    //       getStats(argsStr);
    //       break;
    //     default:
    //       contentDiv.innerHTML = `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /${command}`;
    //       resultDiv.style.display = 'block';
    //   }
    } catch (error) {
      contentDiv.innerHTML = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      resultDiv.style.display = 'block';
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
  function handleCommandEnter(e) {
    if (e.key === 'Enter') {
      runSmartCommand();
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ
  async function getItem(itemId) {
    if (!itemId) {
      showError('–£–∫–∞–∂–∏—Ç–µ ID –∏–∑–¥–µ–ª–∏—è');
      return;
    }
  
    try {
      const db = window.db;
      const doc = await db.collection('items').doc(itemId).get();
  
      if (!doc.exists) {
        showError(`–ò–∑–¥–µ–ª–∏–µ ${itemId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        return;
      }
  
      const item = doc.data();
      const contentDiv = document.getElementById('resultContent');
      
      contentDiv.innerHTML = `
        <h3>üì¶ –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–∑–¥–µ–ª–∏—è</h3>
        <strong>ID:</strong> ${item.id}<br>
        <strong>–¢–∏–ø:</strong> ${item.type}<br>
        <strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</strong> ${item.manufacturer || '‚Äî'}<br>
        <strong>–ú–∞—Ç–µ—Ä–∏–∞–ª:</strong> ${item.material}<br>
        <strong>–î–∞—Ç–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</strong> ${item.date || '‚Äî'}<br>
        <strong>–ü–∞—Ä—Ç–∏—è:</strong> ${item.batch || '‚Äî'}<br>
        ${item.diameter ? `<strong>–î–∏–∞–º–µ—Ç—Ä:</strong> ${item.diameter} –º–º<br>` : ''}
        ${item.pn ? `<strong>PN:</strong> ${item.pn}<br>` : ''}
        ${item.volume ? `<strong>–û–±—ä—ë–º:</strong> ${item.volume} –º¬≥<br>` : ''}
        <hr>
        <strong>–ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å:</strong><br>
        ${await renderDocStatus(item)}
      `;
  
      document.getElementById('smartResult').style.display = 'block';
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
  async function getCompany(name) {
    if (!name) {
      showError('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è');
      return;
    }
  
    try {
      const db = window.db;
      const snapshot = await db.collection('items')
        .where('manufacturer', '==', name)
        .get();
  
      if (snapshot.empty) {
        showError(`–ù–µ—Ç –∏–∑–¥–µ–ª–∏–π –æ—Ç ${name}`);
        return;
      }
  
      const items = snapshot.docs.map(d => d.data());
      const ncrCount = items.filter(i => i.ncr && i.ncr.length > 0).length;
      const total = items.length;
      const missingUZK = items.filter(i => !i.documents?.some(d => d.name === '–£–ó–ö')).length;
  
      const contentDiv = document.getElementById('resultContent');
      contentDiv.innerHTML = `
        <h3>üè≠ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è</h3>
        <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${name}<br>
        <strong>–í—Å–µ–≥–æ –∏–∑–¥–µ–ª–∏–π:</strong> ${total}<br>
        <strong>–° NCR:</strong> ${ncrCount} (${Math.round(ncrCount / total * 100)}%)<br>
        <strong>–ë–µ–∑ –£–ó–ö:</strong> ${missingUZK}<br>
        <strong>–ü–µ—Ä–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ:</strong> ${items.sort((a,b) => a.date.localeCompare(b.date))[0]?.date}<br>
        <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ:</strong> ${items.sort((a,b) => b.date.localeCompare(a.date))[0]?.date}<br>
        <hr>
        <strong>–¢–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</strong><br>
        ${[...new Set(items.map(i => i.type))].join(', ')}
      `;
  
      document.getElementById('smartResult').style.display = 'block';
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø—É—Å–∫
  async function showTolerances(argsStr) {
    const params = parseArgs(argsStr);
    const size = parseFloat(params.size);
    const fit = params.fit;
  
    if (!size || !fit) {
      showError('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /show_tolerances size=50 fit=h7');
      return;
    }
  
    try {
      const tolerances = await loadKnowledgeData('tolerances.json');
      const table = tolerances[fit];
      if (!table) {
        showError(`–ü–æ—Å–∞–¥–∫–∞ ${fit} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }
  
      const row = table.find(r => size > r.min && size <= r.max);
      if (!row) {
        showError(`–†–∞–∑–º–µ—Ä ${size} –º–º –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è ${fit}`);
        return;
      }
  
      const upper = (row.upper / 1000).toFixed(3);
      const lower = (row.lower / 1000).toFixed(3);
      const diff = (upper - lower).toFixed(3);
  
      const contentDiv = document.getElementById('resultContent');
      contentDiv.innerHTML = `
        <h3>üìè –î–æ–ø—É—Å–∫: ${size} ${fit.toUpperCase()}</h3>
        <strong>–í–µ—Ä—Ö–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</strong> ${upper >= 0 ? '+' : ''}${upper} –º–º<br>
        <strong>–ù–∏–∂–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</strong> ${lower >= 0 ? '+' : ''}${lower} –º–º<br>
        <strong>–ü–æ–ª–µ –¥–æ–ø—É—Å–∫–∞:</strong> ${diff} –º–º<br>
        <div style="margin-top: 10px; font-size: 0.9em; color: #666;">
          –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${row.min}‚Äì${row.max} –º–º
        </div>
      `;
  
      document.getElementById('smartResult').style.display = 'block';
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å NCR
async function getNCR(id) {
    if (!id) {
      showError('–£–∫–∞–∂–∏—Ç–µ ID –∞–∫—Ç–∞');
      return;
    }
  
    try {
      const db = window.db;
      const doc = await db.collection('ncrs').doc(id).get();
  
      if (!doc.exists) {
        showError(`–ê–∫—Ç NCR ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }
  
      const ncr = doc.data();
      const contentDiv = document.getElementById('resultContent');
  
      contentDiv.innerHTML = `
        <h3>üìù –ê–∫—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${ncr.id}</h3>
        <strong>–ò–∑–¥–µ–ª–∏–µ:</strong> ${ncr.itemId}<br>
        <strong>–¢–∏–ø:</strong> ${ncr.type || '‚Äî'}<br>
        <strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç:</strong> ${ncr.standard || '‚Äî'}<br>
        <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${ncr.description || '‚Äî'}<br>
        <strong>–î–∞—Ç–∞:</strong> ${new Date(ncr.createdAt).toLocaleDateString()}<br>
        <strong>–°—Ç–∞—Ç—É—Å:</strong> ${ncr.status || 'open'}<br>
        <strong>–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä:</strong> ${ncr.inspector || '‚Äî'}
      `;
  
      document.getElementById('smartResult').style.display = 'block';
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
async function getInspection(id) {
    if (!id) {
      showError('–£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return;
    }
  
    try {
      const db = window.db;
      const doc = await db.collection('inspections').doc(id).get();
  
      if (!doc.exists) {
        showError(`–ü—Ä–æ–≤–µ—Ä–∫–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }
  
      const insp = doc.data();
      const contentDiv = document.getElementById('resultContent');
  
      contentDiv.innerHTML = `
        <h3>üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: ${insp.id}</h3>
        <strong>–ò–∑–¥–µ–ª–∏–µ:</strong> ${insp.itemId}<br>
        <strong>–¢–∏–ø:</strong> ${insp.type}<br>
        <strong>–ú–µ—Ç–æ–¥:</strong> ${insp.method}<br>
        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> ${insp.result}<br>
        <strong>–î–∞—Ç–∞:</strong> ${new Date(insp.date).toLocaleDateString()}<br>
        <strong>–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä:</strong> ${insp.inspector}<br>
        <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${insp.comment || '‚Äî'}
      `;
  
      document.getElementById('smartResult').style.display = 'block';
    } catch (error) {
      showError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  function showError(msg) {
    const contentDiv = document.getElementById('resultContent');
    contentDiv.innerHTML = `<div style="color: #e74c3c;">‚ùå ${msg}</div>`;
    document.getElementById('smartResult').style.display = 'block';
  }
  
  async function renderDocStatus(item) {
    const products = await loadKnowledgeData('products.json');
    const required = products[item.type]?.required_docs || [];
    const uploaded = item.documents?.map(d => d.name) || [];
  
    return required.map(doc => {
      const has = uploaded.includes(doc);
      return `<div style="color: ${has ? '#27ae60' : '#e74c3c'};">${has ? '‚úÖ' : '‚ùå'} ${doc}</div>`;
    }).join('');
  }
  
  function parseArgs(str) {
    const args = {};
    str.split(' ').forEach(arg => {
      const [k, v] = arg.split('=');
      if (k && v) args[k] = v;
    });
    return args;
  }

  function generatePDF() {
    try {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();
  
      const content = document.getElementById('resultContent');
      if (!content) throw new Error('–≠–ª–µ–º–µ–Ω—Ç resultContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
      const text = content.innerText;
  
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ —à–∏—Ä–∏–Ω–µ
      const lines = doc.splitTextToSize(text, 180);
  
      doc.setFontSize(14);
      doc.text("–û—Ç—á—ë—Ç", 10, 10);
      doc.setFontSize(10);
      doc.text(lines, 10, 20);
  
      doc.save('–æ—Ç—á–µ—Ç.pdf');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF: ' + error.message);
    }
  }


//   function generatePDF() {
//     const { jsPDF } = window.jspdf;
//     const doc = new jsPDF();
  
//     const content = document.getElementById('resultContent');
//     const title = document.querySelector('#resultContent h3')?.innerText || '–û—Ç—á—ë—Ç';
  
//     // –ó–∞–≥–æ–ª–æ–≤–æ–∫
//     doc.setFontSize(16);
//     doc.text(title, 10, 10);
  
//     // –¢–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ ‚Äî –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
//     const lines = doc.splitTextToSize(content.innerText, 180);
//     doc.setFontSize(10);
//     doc.text(lines, 10, 20);
  
//     // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
//     doc.setFontSize(8);
//     doc.text(`–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString()}`, 10, doc.internal.pageSize.height - 10);
  
//     doc.save('–æ—Ç—á–µ—Ç.pdf');
//   }

//   function generatePDF() {
//     const { jsPDF } = window.jspdf;
//     const doc = new jsPDF();
  
//     const content = document.getElementById('resultContent');
//     const text = content.innerText;
  
//     // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 90 —Å–∏–º–≤–æ–ª–æ–≤
//     const lines = doc.splitTextToSize(text, 180); // 180 = —à–∏—Ä–∏–Ω–∞ –≤ –º–º
  
//     doc.setFontSize(12);
//     doc.text('–û—Ç—á—ë—Ç –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞', 10, 10);
//     doc.setFontSize(10);
//     doc.text(lines, 10, 20); // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç
  
//     doc.save('–æ—Ç—á–µ—Ç.pdf');
//   }
//   function generatePDF() {
//     const { jsPDF } = window.jspdf;
//     const doc = new jsPDF();
  
//     const content = document.getElementById('resultContent').innerText;
//     doc.setFontSize(12);
//     doc.text(content, 10, 10);
//     doc.save('–æ—Ç—á–µ—Ç.pdf');
//   }