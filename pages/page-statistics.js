// pages/page-statistics.js

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStatistics() {
    const period = document.getElementById('statPeriod').value;
    const stats = await calculateStatistics(period);
    
    displayStatistics(stats);
  }
  
  // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async function calculateStatistics(period) {
    try {
      const db = window.db;
      const now = new Date();
      let startDate;
  
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
      switch(period) {
        case 'month':
          startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
          break;
        case 'quarter':
          startDate = new Date(now.getFullYear(), now.getMonth() - 3, 1);
          break;
        case 'year':
          startDate = new Date(now.getFullYear() - 1, now.getMonth(), 1);
          break;
        default:
          startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      }
  
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const itemsSnapshot = await db.collection('items')
        .where('createdAt', '>=', startDate.toISOString())
        .get();
      
      const ncrsSnapshot = await db.collection('ncrs')
        .where('createdAt', '>=', startDate.toISOString())
        .get();
  
      const totalItems = itemsSnapshot.size;
      const totalNCR = ncrsSnapshot.size;
      const defectRate = totalItems > 0 ? ((totalNCR / totalItems) * 100).toFixed(1) : 0;
  
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–µ–∫—Ç—ã
      const defectTypes = {};
      const severityCount = { minor: 0, major: 0, critical: 0 };
      const companyStats = {};
  
      ncrsSnapshot.forEach(doc => {
        const ncr = doc.data();
        
        // –¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤
        defectTypes[ncr.type] = (defectTypes[ncr.type] || 0) + 1;
        
        // –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
        severityCount[ncr.severity] = (severityCount[ncr.severity] || 0) + 1;
        
        // –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (—á–µ—Ä–µ–∑ –∏–∑–¥–µ–ª–∏—è)
        // –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ - –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
      });
  
      // –¢–æ–ø –¥–µ—Ñ–µ–∫—Ç–æ–≤
      const topDefects = Object.entries(defectTypes)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);
  
      return {
        period,
        totalItems,
        totalNCR,
        defectRate,
        topDefects,
        severityCount,
        companyStats,
        startDate: startDate.toISOString().split('T')[0],
        endDate: now.toISOString().split('T')[0]
      };
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  function displayStatistics(stats) {
    if (!stats) {
      document.getElementById('statsOverview').innerHTML = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏';
      return;
    }
  
    // –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
    document.getElementById('statsOverview').innerHTML = `
      <div class="stats-card">
        <h3>üìà –û–±—â–∞—è —Å–≤–æ–¥–∫–∞</h3>
        <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> ${stats.startDate} ‚Äî ${stats.endDate}</p>
        <p><strong>–ò–∑–¥–µ–ª–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:</strong> ${stats.totalItems}</p>
        <p><strong>–ê–∫—Ç–æ–≤ NCR:</strong> ${stats.totalNCR}</p>
        <p><strong>–£—Ä–æ–≤–µ–Ω—å –±—Ä–∞–∫–∞:</strong> <span class="rate">${stats.defectRate}%</span></p>
      </div>
    `;
  
    // –¢—Ä–µ–Ω–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    document.getElementById('trendChart').innerHTML = `
      <div class="chart-placeholder">
        üìà –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ)
      </div>
    `;
  
    // –¢–æ–ø –¥–µ—Ñ–µ–∫—Ç–æ–≤
    let topDefectsHTML = '<ul>';
    stats.topDefects.forEach(([type, count]) => {
      topDefectsHTML += `<li><strong>${type}:</strong> ${count} —à—Ç.</li>`;
    });
    topDefectsHTML += '</ul>';
    document.getElementById('topDefects').innerHTML = topDefectsHTML;
  
    // –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
    document.getElementById('severityChart').innerHTML = `
      <div class="severity-stats">
        <div class="severity-item">
          <span class="severity-badge critical">Critical</span>: ${stats.severityCount.critical || 0}
        </div>
        <div class="severity-item">
          <span class="severity-badge major">Major</span>: ${stats.severityCount.major || 0}
        </div>
        <div class="severity-item">
          <span class="severity-badge minor">Minor</span>: ${stats.severityCount.minor || 0}
        </div>
      </div>
    `;
  
    // –ü–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º (–∑–∞–≥–ª—É—à–∫–∞)
    document.getElementById('companyStats').innerHTML = `
      <div class="chart-placeholder">
        üè≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)
      </div>
    `;
  
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    let recommendation = '';
    if (stats.defectRate > 10) {
      recommendation = '‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±—Ä–∞–∫–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å–∏–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å.';
    } else if (stats.defectRate > 5) {
      recommendation = '‚ÑπÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±—Ä–∞–∫–∞. –°–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º.';
    } else {
      recommendation = '‚úÖ –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ —Ö–æ—Ä–æ—à–∏–π.';
    }
  
    document.getElementById('statsOverview').innerHTML += `
      <div class="recommendation">
        <h4>ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</h4>
        <p>${recommendation}</p>
      </div>
    `;
  }
  
  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.addEventListener('DOMContentLoaded', loadStatistics);